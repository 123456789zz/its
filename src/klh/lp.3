
;--------------------------------------------------;
;                                                  ;
;  INTRODUCTION                                    ;
;                                                  ;
;--------------------------------------------------;
;
   ;  TTY simulator and Downwire loader

;--------------------------------------------------;
;                                                  ;
;  INPUT/OUTPUT EQUIPMENT                          ;
;                                                  ;
;--------------------------------------------------;
;
   ;  Programmable Peripheral Interface #0
   ;
   ;  Use:        Keyboard, Mouse, and Keyset buttons
   ;
   ;  Mode:       273 (BB)
   ;              Port A used in Mode 1 for keyboard input
   ;              Port B used in Mode 0 for button sampling
   ;              Port C lower interrupt vector
   ;              Port C bit 6 and 7 unused
   ;
   ;  Addresses:  367 (F7) control
   ;              364 (F4) keyboard data - parity in MSB
   ;              365 (F5) keyset (0-4), mouse (5-7)
   ;              366 (F6) test keyboard ready bit 5
   ;
   ;  Programmable Peripheral Interface #1
   ;
   ;  Use:        A/D Converter
   ;
   ;  Mode:       232 (9A)
   ;              Port A used in Mode 0 for count LSB
   ;              Port B used in Mode 0 for count MSB
   ;              Port C lower Mode 0 output for cntl
   ;              Port C upper Mode input for status
   ;
   ;  Addresses:  357 (EF) control
   ;              354 (EC) bit 0-7 count
   ;              355 (ED) bit 8-11 count
   ;                 bit 12-15 are zero
   ;              356 (EE) bit 0 strobe low to zero count
   ;                 bit 1 strobe high to start x
   ;                 bit 2 strobe high to start y
   ;                 bit 3 not used
   ;                 bit 4 (input) high during conversion
   ;                 bit 5-7 (input) not used
   ;

;--------------------------------------------------;
;                                                  ;
;  INPUT/OUTPUT EQUIPMENT                          ;
;                                                  ;
;--------------------------------------------------;
;
   ;  Programmable Peripheral Interface #2
   ;
   ;  Use:        Video Display Controller
   ;
   ;  Mode:       202 (82)
   ;              Port A used in Mode 0 for refresh base X 256
   ;              Port B used in Mode 0 for status input
   ;                 bit 0 vertical blanking
   ;                     1 horizontal blanking
   ;                     2 free
   ;                     3 free
   ;                     4 free
   ;                     5 free
   ;                     6 free
   ;                     7 "9th" refresh bit read
   ;              Port C various mode output
   ;                 bit 0 memory access 0-CPU or 1-DPU
   ;                     1 free
   ;                     2 free
   ;                     3 free
   ;                     4 free
   ;                     5 free
   ;                     6 free
   ;                     7 "9th" refresh bit write
   ;
   ;  Addresses:  177 (7F) control
   ;              174 (7C) refresh base X 256
   ;              175 (7D) status input
   ;              176 (7E) mode control output
   ;

;--------------------------------------------------;
;                                                  ;
;  INPUT/OUTPUT EQUIPMENT                          ;
;                                                  ;
;--------------------------------------------------;
;
   ;  Programmable Communication Interface #0
   ;
   ;  Use:        Display Interface (DI)
   ;
   ;  Mode:       316 (CE) (2 stop bits,no parity, 8 bit, X16 factor)
   ;
   ;  Command:    47 (27) (transmitter and receiver enable)
   ;
   ;  Addresses:  373 (FB) control
   ;              372 (FA) data (input or output)
   ;
   ;  Programmable Communication Interface #1
   ;
   ;  Use:        External Processor (EP)
   ;
   ;  Mode:       316 (CE) (2 stop bits,no parity, 8 bit, X16 factor)
   ;
   ;  Command:    47 (27) (transmitter and receiver enable)
   ;
   ;  Addresses:  337 (DF) control
   ;              336 (DE) data (input or output)
   ;
   ;  Programmable Communication Interface #2
   ;
   ;  Use:        Copy Printer (CP)
   ;
   ;  Mode:       316 (CE)(2 stop bits,no parity, 8 bit, X16 factor)
   ;
   ;  Command:    47 (27) (transmitter and receiver enable)
   ;
   ;  Addresses:  277 (BF) control
   ;              276 (BE) data (input or output)
   ;

;--------------------------------------------------;
;                                                  ;
;  INPUT/OUTPUT EQUIPMENT                          ;
;                                                  ;
;--------------------------------------------------;
;
   ;  Device names
   ;
   keysmd=      273             ;keyboard and button mode
   keys=        367             ;ppi-0 address
   kbd=         364             ;keyboard address
   kbdmsk=      177     ;clear parity
   kbdflg=      040     ;keyboard ready bit
   kbdsts=      366             ;keyboard status address
   bttns=       365             ;mouse and keyset switches
   msmsk=       340     ;mouse button mask
   kstmsk=      37      ;keyset mask
   ;
   admd=        232             ;A/D converter mode
   ad=  357             ;control address
   adflg=       020     ;a/d busy bit
   adsts=       356             ;a/d status address
   strbx1=      3       ;bit set 1
   strbx2=      2       ;bit clear 1
   strby1=      5       ;bit set 2
   strby2=      4       ;bitr clear 2
   adclr1=      0       ;bit clear 0
   adclr2=      1       ;bit set 1
   admsb=       355             ;count msb's
   adlsb=       354             ;count lsb's
   ;
   uartmd=      316             ;UART mode setting
   uartcd=      47              ;UART command word
   dicntl=      373             ;display control
   dir=         372             ;di receiver
   dix=         372             ;di transmitter
   epcntl=      337             ;external processor contro
   epr=         336             ;ep receiver
   epx=         336             ;ep transmitter
   cpcntl=      277             ;copy printer control
   cpr=         276             ;cp receiver
   cpx=         276             ;cp transmitter
   rxrdy=       2       ;receiver ready bit
   txrdy=       1       ;transmitter ready bit
   parity=      177     ;clear parity bit
   ;
   vdmd=        202             ;Video Display mode
   vd=  177             ;control address
   vdbase=      174             ;refresh base address X 256
   vdstat=      175             ;status port
        vdmode=         176             ;mode control port
   vdscpu=      0               ;set CPU mode
   vdsdpu=      1               ;set DPU mode
   vds9=        17              ;set "9th" bit
   vdc9=        16              ;clear "9th" bit

;--------------------------------------------------;
;                                                  ;
;  INPUT/OUTPUT EQUIPMENT                          ;
;                                                  ;
;--------------------------------------------------;
;
   ;
   ;  Monitor constants
   ;
   mstak=       11752           ;top of stack
   ;
   ptr=         11753           ;video diplay address
   ln=  11752           ;current display line
   nchar=       80.             ;characters per line
   nline=       64.             ;number of lines per screen
   ;
   moncll=      ^_              ;US recalls monitor
   monloc=      10              ;RST 1 address monitor start
   ;
   lpesc=       33              ;line processor escape char 
   ;
   mar=         11776           ;memory address pointer
   epbs=        11774           ;secondary state switch

;--------------------------------------------------;
;                                                  ;
;  SYSTEM INITIALIZATION                           ;
;                                                  ;
;--------------------------------------------------;
;
        loc 10000
        .space  2
        jmp     monci   ;monitor input
        jmp     init    ;monitor initalization and tty
        .space  2
   init:        mvi     a,uartmd        ;set uart modes
        out     dicntl
        out     epcntl
        out     cpcntl
        mvi     a,uartcd        ;set command word
        out     dicntl
        out     epcntl
        out     cpcntl
        .space  2
        mvi     a,keysmd        ;set keyboard mode (ppi)
        out     keys
        .space  2
        mvi     a,admd  ;set a/d converter (ppi1)
        out     ad
        .space  2
        mvi     a,vdmd  ;set video display controller
        out     vd
        .space  2
        lxi     h,mstak         ;set stack pointer
        sphl

;--------------------------------------------------;
;                                                  ;
;  TTY MODE                                        ;
;                                                  ;
;--------------------------------------------------;
;
   ttymd:       lxi     d,eps10         ;ep idle state
        mvi     a,300   ;set refresh base
        out     vdbase
   kbdtst:      in      kbdsts  ;keyboard full?
        ani     kbdflg
        jz      eptst   ;no go on
   kbdfc:       in      kbd     ;attempt to clear flag
        in      kbdsts  ;done?
        ani     kbdflg  ;flag bit
        jnz     kbdfc   ;keep trying
   kbdin:       in      kbd     ;get keyboard data
        ani     kbdmsk  ;clear parity
        jz      vdclr   ;NULL key to clear screen
        cpi     moncll  ;US means back to monitor
        jz      monloc  ;go there
        mov     c,a     ;mov result to c
        call    epout   ;send to ep
        in      kbd     ;clear keyboard flag
   ;
   eptst:       in      epcntl  ;ep full?
        ani     rxrdy
        jz      kbdtst  ;nothing repeat loop
   epin:        in      epr
        ani     parity
        jz      kbdtst  ;ignore nulls
        cpi     lpesc   ;does a command begin?
        jz      eps12
        mov     h,d     ;dispatch
        mov     l,e
        pchl            ;reg pair d,e main state
   ;
   eps10:       mov     c,a     ;transmit char
        call    vdout
   eps14:       lxi     d,eps10         ;reset state switch
        jmp     kbdtst  ;next
   eps12:       lxi     d,eps20         ;set up to check next
        jmp     kbdtst
   ;
   eps20:       cpi     100     ;case test on acc
        jz      eps21
        cpi     101
        jz      eps22
        cpi     102
        jz      eps14
        cpi     103
        jz      eps24
        jmp     eps10
   ;
   eps21:       lxi     h,eps50         ;memory address reg
   eps23:       shld    epbs    ;after byte comes
                        ;epbs point to next routine
   eps25:       lxi     d,eps30         ;lsb state
        jmp     kbdtst
   eps22:       lxi     h,eps60         ;memory load turn on
        jmp     eps23
   eps24:       jmp     eps14   ;starting address ignored now
   ;
   eps30:       ani     17      ;lsb to b
        mov     b,a
        lxi     d,eps40         ;set msb state
        jmp     kbdtst
   eps40:       ani     17      ;msb V b to a
        rlc             ;rotate to msb
        rlc
        rlc
        rlc
        ora     b
        lhld    epbs    ;post byte state
        pchl            ;jump there
   ;
   eps50:       lxi     h,mar   ;memory address lsb
        mov     m,a     ;store it
        lxi     h,eps51         ;next byte to msb
        shld    epbs
        jmp     eps25
   eps51:       lxi     h,mar+1         ;msb
        mov     m,a     ;this build the top 8 bits
        mvi     c,53    ;tell user addr set
        call    vdout
        jmp     eps14   ;reset
   ;
   eps60:       lhld    mar     ;pick memory address
        mov     m,a     ;store the current byte
        inx     h       ;next
        shld    mar     ;and restore pointer
        jmp     eps25   ;stay in byte build up state
        .space 2
   epout:       in      epcntl  ;busy?
        ani     txrdy
        jz      epout   ;wait
        mov     a,c     ;char n c
        out     epx     ;gone
        ret
        .space  2
   diout:       in      dicntl  ;busy?
        ani     txrdy
        jz      diout
        mov     a,c     ;char in c
        out     dix     ;di transmitter
        ret
        .page
;--------------------------------------------------;
;                                                  ;
;  MONITOR MODE KEYBOARD INPUT                     ;
;                                                  ;
;--------------------------------------------------;
;
   monci:       in      kbdsts  ;keyboard full?
        ani     kbdflg
        jz      mci1    ;no check di input
   mci4:        in      kbd     ;attempt to clear flag
        in      kbdsts  ;done?
        ani     kbdflg  ;flag bit
        jnz     mci4    ;keep trying
        in      kbd     ;get char
        jmp     mci2
   mci1:        in      dicntl  ;any di keyboard?
        ani     rxrdy
        jz      monci   ;none keep trying
        in      dir     ;get char
   mci2:        ani     parity  ;clear parity
        cpi     "a"     ;force upper case
        rm              ;return less than small a
        cpi     "{"
        rp              ;greater than small z
        sui     40      ;case change
   mci3:        ret
        .page
;--------------------------------------------------;
;                                                  ;
;  VIDEO DISPLAY OUTPUT                            ;
;                                                  ;
;--------------------------------------------------;
;
   ; c -> video display
   ;
   vdout:       mov     a,c     ;anything special?
        cpi     15      ;CR
        jz      vdcr
        cpi     12      ;LF
        jz      vdlf
        cpi     40      ; hack to avoid bad font for blank.
        jnz     vdo2    ; skip smash of C if not blank.
        mvi     c,0     ; Ah, a blank! zero C to write
   ;
   vdo2:        lhld    ptr     ;pointer to next char
        mvi     a,vdscpu        ;get control of memory
        out     vd
        mov     m,c     ;char -> refresh store
        mvi     a,vdsdpu        ;give control back to dpu
        out     vd
        inx     h       ;next loc
        shld    ptr     ;save
        ret
   ;
   vdcr:        lda     ln      ;get line count
        inr     a       ;next line
        ani     77      ;constrain to 64 lines
        sta     ln      ;restore
   ;
        mov     c,a     ;ln * 80 + 0C000H -> hl
        rlc
        rlc
        rlc
        rlc
        mov     e,a
        ani     17
        mov     d,a
        mov     a,e
        ani     17_4
        mov     e,a     ;de have 16*ln
   ;
        mov     a,c
        rrc
        rrc
        mov     c,a
        ani     17
        mov     b,a
        mov     a,c
        ani     300
        mov     c,a     ;bc have 64*ln
   ;
        lxi     h,140000        ;base of refresh
        dad     b
        dad     d
        shld    ptr     ;pointer
   ;
        mvi     a,vdscpu        ;get control of memory
        out     vd
        mvi     a,0     ;clear this line
        mvi     b,nchar
   vdcr1:       mov     m,a
        inx     h
        dcr     b
        jnz     vdcr1
        mvi     a,vdsdpu        ;give control back to dpu
        out     vd
        ret
   ;
   vdlf:        ret             ;for now
        .page
;--------------------------------------------------;
;                                                  ;
;  VIDEO DISPLAY OUTPUT                            ;
;                                                  ;
;--------------------------------------------------;
;
   ; clear video display screen
   ;
   vdclr:       mvi     b,nline         ;number of lines
        lxi     h,140000        ;base address
        mvi     a,vdscpu        ;get control of CPU
        out     vd
        mvi     a,0
   vdcl1:       mvi     c,nchar         ;number of chars
   vdcl2:       mov     m,a
        inx     h       ;next
        dcr     c
        jnz     vdcl2
   ;
        dcr     b
        jnz     vdcl1
   ;
        xra     a       ;clear a
        sta     ln      ;reset line count
        lxi     h,140000        ;base address
        shld    ptr
        mvi     a,vdsdpu        ;return control to dpu
        out     vd
        jmp     kbdtst
