	TITLE CUBWAR
	SUBTTL GENERAL DEFINITIONS

ITS==1	;ASSEMBLE ITS VERSION
CMU==0
	OPDEF	PJRST [JRST]
IFN CMU,	TRMOP.=<CALLI 116>	;EQUIV.

A0=0
A1=1
A2=2
A3=3
A4=4
A5=5
A6=6
A7=7
A10=10
A11=11
A12=12
A13=13
IFN CMU,{
A14=14
A15=15
A16=16
}
IFN ITS,{	;INTERRUPT HANDLER REGISTERS
I14=14
I15=15
I16=16
}
P=17

SHPCRX==0			;X COORDINATE
SHPCRY==SHPCRX+1		;Y COORDINATE
SHPCRZ==SHPCRY+1		;Z COORDINATE
SHPCRF==SHPCRZ+1		;FORWARD FACING
SHPCRU==SHPCRF+1		;UPWARD FACING
SHPRNC==SHPCRU+1		;REINCARNATIONS
SHPFRD==SHPRNC+1		;FORWARD RADAR RANGE
SHPMRX==SHPFRD+1		;MOBILE RADAR X
SHPMRY==SHPMRX+1		;MOBILE RADAR Y
SHPMRZ==SHPMRY+1		;MOBILE RADAR Z
SHPBLZ==SHPMRZ+1		;BLAZERS LEFT
SHPHIT==SHPBLZ+1		;HITS
SHPTIM==SHPHIT+1		;TIME BLAZERS RECHARGED
SHPTRC==SHPTIM+1		;NUMBER OF TRACED SHIP
SHPRAT==SHPTRC+1		;RATING
SHPNUM==SHPRAT+1		;PLAYER NUMBER
SHPINB==SHPNUM+1		;INPUT BUFFER
SHPOUB==SHPINB+3		;OUTPUT BUFFER
SHPINU==SHPOUB+3		;INPUT UUO
SHPOUU==SHPINU+1		;OUTPUT UUO
SHPTTY==SHPOUU+1		;TTY NUMBER
SHPNAM==SHPTTY+1		;POINTER TO NAME
SHPLEN==SHPNAM+1		;LENGTH OF SHIP BLOCK

IFN ITS,{
LOC 41
	JSR UUOH	;UUO HANDLER TO SIMULATE SOME 10-50 STUFF
	JSR INT		;INTERRUPT HANDLER FOR I/O
LOC 100

	;SIMULATED 10-50 UUO'S
	OPDEF CALLI [1000,,0]
	OPDEF TTCALL [2000,,0]
	OPDEF INPUT [3000,,0]
	OPDEF OUTPUT [4000,,0]
UUOMAX==4
	OPDEF RESET [CALLI 0]
MSTIME=<CALLI 23>
LOCK=<CALLI 60>
HIBER=<CALLI 72>

TYIC==16	;TTY INPUT CH
TYOC==17	;TTY OUTPUT CH
$OPCOD==331100	;BYTE PTR FIELD
$ACFLD==270400	;"


PAT:
PATCH:	BLOCK 100

UUOH:	0
	MOVEM A13,A13SAV#
	LDB A13,[$OPCOD,,40]	;GET OP CODE OF UUO
	CAIG A13,UUOMAX	;CHECK
	JRST @UUOTAB(A13)	;GO DO IT
	.VALUE		;BAD UUO 
UUORET:	MOVE A13,A13SAV
	JRST @UUOH

UUOTAB:	[.VALUE]	;0
	UCALLI		;CALLI E
	UTTCAL		;TTCALL AC,
	UINPT		;INPUT
	UOUTPT		;OUTPUT

UCALLI:	HRRZ A13,40	;GET E
	CAIN A13,0	;RESET?
	JRST URESET
	CAIN A13,23	;MSTIME?
	JRST UMSTIM
	CAIN A13,60	;LOCK?
	JRST ULOCK
	CAIN A13,72	;HIBER?
	JRST UHIBER
	.VALUE		;UNIMPLEMENTED CALLI

URESET:	.SUSET [.SMSK2,,[0]]	;DISABLE AND
	.SUSET [.SIFPIR,,[0]]	;CLEAR ALL 2ND WD INTS.
	.IOPDL	;RESET IOPDL (MIGHT USE SOMEDAY)

	MOVSI A13,-17	;AOBJN TRHU IO CHANNELS
URSET1:	XCT CLSETB(A13)	;CLOSE
	SETOM CHNCNT(A13)	;SET BUFFER CNT=-1
	AOBJN URSET1
	SETZM TTYSTI
	SETZM TTYSTO
	SETZM INAVAL
	JRST UUORET

UMSTIM:	MOVEM A12,A12SAV#
	.PDTIME A12,	;GET TIME IN 60TH'S
	IMULI A12,<=1000/=60>	;SO AS TO APPROX. MILLISECS.
	LDB A13,[$ACFLD,,40]	;GET AC FIELD
	MOVEM A12,(A13)		;STORE
	MOVE A12,A12SAV
	JRST UUORET

ULOCK:	JRST UUORET

UHIBER:	LDB A13,[$ACFLD,,40]
	HLRZ A13,(A13)	;GET LH OF HIBER'S AC
	CAIE A13,20	;ONLY THIS COMBINATION IMPLEMENTED
	.VALUE
	SKIPN INAVAL	;SKIP WHEN INPUT AVAILABLE
	.HANG		;ELSE WAIT FOREVER
	AOS UUOH	;SKIP ON RETURN
	JRST UUORET


UINPT:	MOVEM A12,A12SAV
	MOVEM A11,A11SAV#
	LDB A12,[$ACFLD,,40]
	LSH A12,1	;*2
	SUBI A12,2	;GET INPUT CHANNEL #
	SKIPG A11,CHNCNT(A12)	;CHARS IN BUFFER WAITING?
	.VALUE	;UGH, TRIED TO 'INPUT' WHEN NOTHING THERE.
	MOVE A13,CHTPGB(A12)	;GET ADDR OF PGM BUFFER BLK
	MOVEM A11,1(A13)	;STORE # CHARS
	MOVE A11,CHSTPT(A12)	;GET PTR TO BEG OF BUFF
	MOVEM A11,(A13)		;STORE PTR
	MOVE A11,CHMSK(A12)	;GET BIT FOR MASK
	ANDCAM A11,INAVAL	;TURN OFF BIT FOR THIS CHANNEL
	MOVE A11,A11SAV
	MOVE A12,A12SAV
	JRST UUORET

UOUTPT:	MOVEM A12,A12SAV
	MOVEM A11,A11SAV
	LDB A12,[$ACFLD,,40]
	LSH A12,1
	SUBI A12,1	;GET CHANNEL # (OUTPUT!)
	DPB A12,[$ACFLD,,IOTINS]
	MOVE A13,CHTPGB(A12)	;GET ADDR OF PGM BUFFER BLK
	MOVE A12,CHSTPT(A12)	;GET START PTR TO BUFFER
	MOVEM A12,(A13)		;STORE IN PGM BLK
	MOVEI A11,CHBFMX	;SET UP MAX CHS IN BUFF
	SKIPG 1(A13)	;SEE IF OUTPUTTING BECAUSE BUFFER FULL
	SKIPA A11,[CHBFMX-1]	;YES, JUST USE THIS #
	SUB A11,1(A13)	;SUB. TO FIND # CHARS TO OUTPUT

	HRRZM A12,IOTPTR
	IDIVI A11,5	;FIND # WHOLE WDS (BLOCK OUTPUT)
	JUMPE A11,UOUTP2	;NO WHOLE WDS
	MOVN A11,A11	;NEGATE
	HRLM A11,IOTPTR	;FOR AOBJN TYPE PTR
	XCT IOTINS	;DO WHOLE WDS.
UOUTP2:	JUMPE A12,UOUTP3	;NO LEFTOVER CHARS?
	MOVE A11,@IOTPTR	;SHOULD GET LAST (PARTIAL) WD
	LSH A11,@BLSHTB(A12)	;BLOCK PTR SHIFT TO GET CHARS RIGHT ADJ.
	MOVE A12,BPTRTB(A12)	;BLOCK PTR
	MOVEM A12,IOTPTR	;SET UP
	XCT IOTINS	;SPIT OUT LAST CHARS
UOUTP3:	MOVEI A11,CHBFMX
	MOVEM A11,1(A13)	;SET UP CNT AGAIN (BUFF PTR WAS INIT'D BEFORE .IOT)
	MOVE A11,A11SAV
	MOVE A12,A12SAV
	JRST UUORET

TTYSTI:	0	;-1 WHEN TYIC OPEN
TTYSTO:	0	;-1 WHEN TYOC OPEN

IOTINS:	.IOT 0,IOTPTR
IOTPTR:	0

BPTRTB:	0
	377777,,A11
	477777,,A11
	577777,,A11
	677777,,A11
	-1,,A11

BLSHTB:	0
	0,,-=28
	0,,-=21
	0,,-=14
	0,,-=7
	0


UTTCAL:	LDB A13,[$ACFLD,,40]
	JRST @UTTCAC(A13)	;GO TO APPROPRIATE TTCALL ROUT.
UTTCAC:	UTTC0
	UTTC1
	[.VALUE]
	UTTC3
REPEAT =12,{	[.VALUE]
}

	;INCHRW - INPUT CHAR, WAIT UNTIL.
UTTC0:	SKIPE TTYSTI	;SEE IF TTYI OPEN OR NOT
	JRST UTTC01	;YUP
	.OPEN TYIC,[0,,'TTY']	;UNIT ASCII IN
	.VALUE
	SETOM TTYSTI
UTTC01:	.IOT TYIC,A13	;GET CHAR
	MOVEM A13,@40	;STORE
	JRST UUORET

	;OUTCHR - OUTPUT A CHAR
UTTC1:	LDB A13,[000700,,@40]	;GET THE CHAR
	SKIPE TTYSTO	;SEE IF TTYO OPEN OR NOT
	JRST UTTC11	;YUP
	.OPEN TYOC,[1,,'TTY']	;UNIT ASCII OUT
	.VALUE
	SETOM TTYSTO
UTTC11:	.IOT TYOC,A13
	JRST UUORET

	;OUTSTR - OUTPUT A STRING
UTTC3:	MOVE A13,40	;GET ADDR OF STRING
	HRLI A13,440700	;SET UP PTR
	MOVEM A13,OSTRPT#
	SKIPE TTYSTO
	JRST UTTC32
	.OPEN TYOC,[1,,'TTY']
	.VALUE
	SETOM TTYSTO
	CAIA
UTTC31:	.IOT TYOC,A13
UTTC32:	ILDB A13,OSTRPT	;GET CHAR
	JUMPN A13,UTTC31	;LOOP TIL FIND NULL
	JRST UUORET
}
	SUBTTL MAIN LOOP

CUBSTR:	RESET			;DROP OLD CHANNELS
	MOVE	P,[-STKL,,STACK]
	PUSHJ	P,INITAL	;GET PLAYERS IN
	MOVEI	A1,1		;LOCK INTO CORE
	LOCK	A1,
	CAI
	MOVEI	A10,SHIPS	;FIRST SHIP

MAINLP:	PUSHJ	P,QUERY		;FIND SOME COMMANDS
	JRST	MAINCM		;GOT ONE
	MOVSI	A1,20		;WAIT FOR TTY INPUT
	HIBER	A1,
	HALT			;WHAT?
	JRST	MAINLP

MAINCM:	PUSHJ	P,MAKMOV	;INTERPRET MOVE
	MOVEI	A0,">"
	PUSHJ	P,OUTCHR	;COMMAND PROMPT
	XCT	SHPOUU(A10)	;FORCE OUTPUT
	JRST	MAINLP
	SUBTTL MAKMOV - COMMAND INTERPRETER
MAKMOV:	PUSHJ	P,INPCHR		;GET THE COMMAND
	POPJ	P,			;NOTHING THERE
	TRZ	A0,040			;UPPER CASE
	MOVE	A1,[-CMNDCT,,CMNDTB]	;COMMAND TABLE

MAKDCD:	HRRZ	A2,(A1)			;COMMAND CHARACTER
	CAIN	A0,(A2)
	JRST	MAKDSP			;DISPATCH IT
	AOBJN	A1,MAKDCD

MAKERC:	MOVEI	A1,MESG01		;"WHAT?"
	PUSHJ	P,OUTSTR

MAKCLR:	PUSHJ	P,INPCHR
	POPJ	P,
	JRST	.-2

MAKERE:	MOVEI	A1,MESG01		;"WHAT?"
	PJRST	OUTSTR

MAKDSP:	HLRZ	A2,(A1)			;GET ROUTINE ADDRESS
	JRST	(A2)

MAKCMR:	PUSHJ	P,INPCHR		;GET SECOND CHARACTER
	JRST	MAKERE
	TRZ	A0,040			;UPPER CASE
	CAIN	A0,"N"			;"RN"?
	PJRST	RENAMP
	CAIN	A0,"T"			;"RT"?
	JRST	MAKCMC
	MOVEI	A1,4
	CAIN	A0,"R"			;"RR"?
	JRST	MAKCCJ
	MOVEI	A1,5
	CAIN	A0,"L"			;"RL"?
	JRST	MAKCCJ
	JRST	MAKERC

MAKCMC:	MOVEI	A1,(A1)
	SUBI	A1,CMNDTB		;MAKE INDEX
MAKCCJ:	PUSHJ	P,CHGORE		;CHANGE ORIENTATION
	JRST	MAKCLR

MAKCMN:	PUSHJ	P,INPCHR		;GET INPUT
	JRST	MAKERE
	TRZ	A0,040
	CAIN	A0,"P"			;"NP"?
	PJRST	NEWPLR
	CAIE	A0,"M"			;"NM"?
	JRST	MAKERC
	PUSHJ	P,RATING
	JRST	MAKCLR

MAKCMM:	PUSHJ	P,INPCHR		;GET INPUT
	PJRST	MMOVE			;"M"
	TRZ	A0,040
	CAIN	A0,"V"			;"MV"?
	JRST	MAKMV2
	CAIN	A0,"R"			;"MR"?
	PJRST	MOBRDR
	CAIE	A0,"S"			;"MS"?
	JRST	MAKERC
	PJRST	MESSAG

MAKCMF:	PUSHJ	P,INPCHR		;GET INPUT
	PJRST	FORRDR			;ASSUME "FR"
	TRZ	A0,040
	CAIN	A0,"R"			;REALLY "FR"?
	PJRST	FORRDR
	CAIN	A0,"B"			;"FB"?
	JRST	MAKMV1
	CAIE	A0,"A"			;"FA"?
	JRST	MAKERC
	PUSHJ	P,FACING
	JRST	MAKCLR

MAKMV1:	PUSHJ	P,BLAZER		;FIRE BLAZER
	JRST	MAKCLR

MAKMV2:	PUSHJ	P,MMOVE
	JRST	MAKCLR
	SUBTTL MOVE ROUTINE
MMOVE:	MOVE	A1,SHPCRF(A10)		;FORWARD FACING NUMBER
	MOVEI	A2,GENWK1		;WORK AREA 1
	PUSHJ	P,NVFUNC		;INTERPRET NUMBER
	MOVEI	A1,(A10)		;COPY POINTER
	HRLI	A1,-3			;3 WORDS
	SETZ	A2,

MOVER1:	MOVE	A0,(A1)			;GET COORDINATE
	ADDB	A0,GENWK1(A2)		;ACCUMULATE
	JUMPLE	A0,MOVER2		;OUT OF CUBE
	CAMLE	A0,CUBSIZ
	JRST	MOVER2
	AOJ	A2,
	AOBJN	A1,MOVER1		;REPEAT
	MOVE	A0,GENWK1		;REPLACE COORDINATES
	MOVEM	A0,SHPCRX(A10)
	MOVE	A1,GENWK1+1
	MOVEM	A1,SHPCRY(A10)
	MOVE	A1,GENWK1+2
	MOVEM	A1,SHPCRZ(A10)
	POPJ	P,

MOVER2:	MOVEI	A1,MESG02		;"NO"
	PJRST	OUTSTR
	SUBTTL	QUERY - TERMINAL POLLING ROUTINE
QUERY:	MOVEI	A7,(A10)		;REMEMBER WHERE I STARTED

QUERY1:	ADDI	A10,SHPLEN		;NEXT SHIP
	CAMLE	A10,LSTSHP		;TOO FAR?
	MOVEI	A10,SHIPS		;RECYCLE
	SKIPE	SHPINB+2(A10)		;DATA IN BUFFER?
	POPJ	P,			;USE THAT SHIP
IFN CMU,{	MOVEI	A1,1			;SKIP ON INPUT READY
	MOVE	A2,SHPTTY(A10)		;FOR THIS TTY
	MOVE	A3,[2,,1]
	TRMOP.	A3,
	CAIA
}
IFN ITS,{	MOVE A1,SHPNUM(A10)	;GET PLAYER #
	LSH A1,1	;*2
	SUBI A1,2	;TO GET INPUT CHANNEL
	MOVE A1,CHMSK(A1)	;GET BIT MASK FOR IT
	AND A1,INAVAL	;SEE IF BIT IS ON (IE INPUT AVAILABLE)
	SKIPE A1
}
	POPJ	P,
	CAIE	A10,(A7)		;LAST ONE?
	JRST	QUERY1			;NO

CPOPJ1:	AOS	(P)
CPOPJ:	POPJ	P,
	SUBTTL	BLAZER ROUTINE
BLAZER:	MSTIME	A0,			;GET CURRENT TIME
	CAMGE	A0,SHPTIM(A10)		;BLAZER READY?
	JRST	BLZR06			;NO
	SOSGE	SHPBLZ(A10)		;ONE LESS BLAZER
	JRST	BLZR08			;OUT OF FIRES
	MOVE	A3,SHPCRX(A10)		;COPY COORDINATES
	MOVE	A4,SHPCRY(A10)
	MOVE	A5,SHPCRZ(A10)
	ADDI	A0,=2000		;TWO SECOND
	MOVEM	A0,SHPTIM(A10)		;DELAY
	MOVE	A1,SHPCRF(A10)		;FORWARD FACING
	MOVEI	A2,A11			;INTO REGISTERS
	PUSHJ	P,NVFUNC

BLZR05:	MOVE	A7,NPLARS
	MOVEI	A6,SHIPS

BLZR01:	CAIN	A6,(A10)		;MY SHIP?
	JRST	BLZR03
	CAME	A3,SHPCRX(A6)
	JRST	BLZR03
	CAME	A4,SHPCRY(A6)
	JRST	BLZR03
	CAMN	A5,SHPCRZ(A6)
	PJRST	KILL			;SCORE A HIT

BLZR03:	ADDI	A6,SHPLEN		;NEXT SHIP
	SOJG	A7,BLZR01
	MOVEI	A1,3

BLZR04:	MOVE	A0,2(A1)
	ADD	A0,A10(A1)
	JUMPE	A0,BLZR09
	CAMLE	A0,CUBSIZ		;OFF THE EDGE?
	JRST	BLZR09
	MOVEM	A0,2(A1)		;NEW BLAZER POSITION
	SOJG	A1,BLZR04
	JRST	BLZR05			;CHECK THE SHIPS AGAIN

BLZR06:	MOVEI	A1,MESG03		;"NOT YET"
	PJRST	OUTSTR

BLZR08:	SETZM	SHPBLZ(A10)		;FIX COUNT
	MOVEI	A1,MESG04		;"OUT OF BLAZERS"
	PJRST	OUTSTR
BLZR09:	MOVEI	A1,MESG05		;"MISSED"
	PJRST	OUTSTR
	SUBTTL	KILL ROUTINE
;	INPUT: A10 POINTS TO WINNER, A6 TO LOSER
;	OUTPUT: RETURNS A10.

KILL:	AOS	SHPRAT(A10)		;TWO POINTS FOR A HIT
	AOS	SHPRAT(A10)
	SOS	SHPRAT(A6)
	SOS	SHPRAT(A6)
	SOSG	SHPHIT(A6)		;CAN HE TAKE MORE?
	JRST	KILL10			;NO, REINCARNATE
	MOVEI	A0,3
	SUB	A0,SHPHIT(A6)		;WHICH HIT IS THIS
	ADDI	A0,060
	DPB	A0,[POINT 7,MESG06+1,20]
	MOVEI	A7,(A10)
	MOVEI	A10,(A6)		;WRITE TO LOSER
	MOVEI	A1,MESG06		;"HIT #N FROM '
	PUSHJ	P,OUTSTR
	MOVE	A1,SHPNAM(A7)
	PUSHJ	P,OUTRPT
	PUSHJ	P,OUTCRL
	XCT	SHPOUU(A10)		;FORCE OUTPUT
	MOVEI	A10,(A7)		;BACK TO WINNER
	MOVEI	A1,MESG07		;"BLAZER HIT ON "
	PUSHJ	P,OUTSTR
	MOVE	A1,SHPNAM(A6)
	PUSHJ	P,OUTRPT
	PUSHJ	P,OUTCRL
	MOVE	A1,SHPNUM(A7)		;GET SHIP #
	CAME	A1,SHPTRC(A6)		;WAS HE TRACKING ME?
	JRST	CPOPJ			;NO
	SETZM	SHPTRC(A6)		;DROP THE TRACE
	MOVEI	A1,MESG08		;"TRACE HAS BEEN BROKEN"
	PUSHJ	P,OUTSTR
	MOVEI	A10,(A6)		;BACK TO LOSER
	MOVEI	A1,MESG09
	PUSHJ	P,OUTSTR
	XCT	SHPOUU(A10)		;FORCE OUTPUT
	MOVEI	A10,(A7)
	AOS	SHPRAT(A7)		;ONE POINT
	SOS	SHPRAT(A6)
	POPJ	P,

KILL10:	MOVEI	A7,(A10)		;SAVE WINNER'S SHIP
	MOVEI	A10,(A6)
	MOVEI	A1,MESG10		;"YOU HAVE BEEN KILLED BY"
	PUSHJ	P,OUTSTR
	MOVE	A1,SHPNAM(A7)
	PUSHJ	P,OUTRPT
	PUSHJ	P,OUTCRL
	MOVEI	A0,12			;TEN POINTS
	ADDM	A0,SHPRAT(A7)
	MOVN	A0,A0
	ADDM	A0,SHPRAT(A6)
	MOVEI	A10,SHIPS		;CHECK ALL OTHER SHIPS
	MOVE	A5,NPLARS

KILL12:	CAMN	A6,SHPTRC(A10)		;IN HIS TRACE?
	SETZM	SHPTRC(A10)		;NO LONGER
	PUSHJ	P,OUTCRL
	MOVE	A1,SHPNAM(A6)
	PUSHJ	P,OUTRPT
	MOVEI	A1,MESG11		;"KILLED BY"
	PUSHJ	P,OUTSTR
	MOVE	A1,SHPNAM(A7)
	PUSHJ	P,OUTRPT
	PUSHJ	P,OUTCRL
	XCT	SHPOUU(A7)
	ADDI	A10,SHPLEN
	SOJG	A5,KILL12
	MOVEI	A0,3			;SALVAGED BLAZERS
	ADDM	A0,SHPBLZ(A7)
	MOVEI	A10,(A6)
	AOS	SHPRNC(A6)		;REINCARNATION
	PUSHJ	P,INIPLR		;RESTART SHIP
	MOVEI	A1,MESG12		;"YOU HAVE BEEN REINCARNATED"
	PUSHJ	P,OUTSTR
	XCT	SHPOUU(A6)		;FORCE TYPEOUT
	MOVEI	A10,(A7)		;BACK TO WINNER
	POPJ	P,
	SUBTTL	INIPLR - INITIALIZE SHIP VARIABLES
INIPLR:	PUSH	P,A2			;SAVE REGISTER
	MOVEI	A2,(A10)
	HRLI	A2,-3			;WORD COUNTER

IPLR10:	PUSHJ	P,RANDOM
	FMPR	A0,CUBSZF		;CUBE LOCATION
	FADRI	A0,(1.0)		;PLUS ONE
	PUSHJ	P,IFIX
	MOVEM	A0,(A2)
	AOBJN	A2,IPLR10
	PUSHJ	P,RANDOM
	FMPRI	A0,(6.0)		;PICK A FACING
	FADRI	A0,(1.0)
	PUSHJ	P,IFIX
	MOVEM	A0,SHPCRF(A10)		;FORWARD FACING

IPLR20:	PUSHJ	P,RANDOM
	FMPRI	A0,(6.0)
	FADRI	A0,(1.0)
	PUSHJ	P,IFIX
	MOVEM	A0,SHPCRU(A10)		;UPWARD FACING
	AOJ	A0,
	ASH	A0,-1
	MOVE	A1,SHPCRF(A10)
	AOJ	A1,
	ASH	A1,-1
	CAMN	A0,A1
	JRST	IPLR20
	MOVE	A0,NPLARS
	IMULI	A0,3
	MOVEM	A0,SHPBLZ(A10)		;NEW BLAZERS
	MOVEI	A0,3
	MOVEM	A0,SHPHIT(A10)
	SETZM	SHPTRC(A10)
	SETZM	SHPTIM(A10)
	POP	P,A2
	POPJ	P,
	SUBTTL	NEWPLR ROUTINE
NEWPLR:	CAIE	A10,SHIPS		;FIRST ONE?
	JRST	NPLR09			;NO
	SETZ	A2,

NPLR01:	PUSHJ	P,INPCHR		;START TTY NUMBER
	JRST	NPLR11
	SUBI	A0,060
	JUMPL	A0,NPLR02		;POOR
	CAILE	A0,7
	JRST	NPLR02
	ASH	A2,3		;APPEND DIGIT
	ADD	A2,A0
	JRST	NPLR01

NPLR02:	JUMPE	A2,NPLR10		;NO TTY #
	ADDI	A0,060			;REPAIR LAST CHAR
	MOVE	A1,NPLARS
	IMULI	A1,SHPLEN
	MOVEI	A7,SHIPS(A1)		;THE NEW SHIP
	MOVE	A6,SHPNAM(A7)
	HRRZ	A1,A6			;COPY POINTER
	SETZM	(A1)
	SETZM	1(A1)
	SETZM	2(A1)
	SETZM	3(A1)
	MOVEI	A5,=18
	JRST	NPLR06

NPLR05:	PUSHJ	P,INPCHR		;GET NAME CHARACTER
	JRST	NPLR08			;DONE

NPLR06:	CAME	A6,SHPNAM(A7)		;UNCHANGED?
	JRST	NPLR07
	CAIN	A0," "
	JRST	NPLR05

NPLR07:	IDPB	A0,A6
	SOJG	A5,NPLR05
	MOVEI	A1,MESG14		;"NAME TOO LONG"
	PUSHJ	P,OUTSTR
	JRST	MAKCLR

NPLR08:	CAMN	A6,SHPNAM(A7)		;GET ANYTHING?
	JRST	NPLR12
	SETZM	SHPRNC(A7)
	SETZM	SHPRAT(A7)
	TRO	A2,200000
	MOVEM	A2,SHPTTY(A7)
	PUSHJ	P,INITTY		;START UP TERMINAL
	JRST	NPLR13
	SETZM	SHPTIM(A7)		;READY TO FIRE
	MOVEI	A10,(A7)
	PUSHJ	P,INIPLR		;PUT HIM IN SPACE
	AOS	NPLARS
	MOVEI	A10,SHIPS		;BACK TO CONTROLLER
	POPJ	P,

NPLR09:	MOVEI	A1,MESG01		;"WHAT?"
	PUSHJ	P,OUTSTR
	JRST	MAKCLR

NPLR10:	MOVEI	A1,MESG15		;"TTY #?"
	PUSHJ	P,OUTSTR
	JRST	MAKCLR

NPLR11:	MOVEI	A1,MESG01		;"WHAT?"
	PJRST	OUTSTR

NPLR12:	MOVEI	A1,MESG16		;"NO NAME"
	PJRST	OUTSTR

NPLR13:	MOVEI	A1,MESG17		;"BAD TTY"
	PJRST	OUTSTR
	SUBTTL	MESSAGE SENDING ROUTINE
MESSAG:	SETZ	A3,
	MOVE	A2,[POINT 7,A3]		;READY TO INSERT
	MOVEI	A4,5

MSGR01:	PUSHJ	P,INPCHR		;GET NAME CHARACTER
	JRST	MAKERE
	CAIN	A0,":"			;NAME TERMINATOR?
	JRST	MSGR03
	CAIN	A0," "
	JRST	MSGR01
	IDPB	A0,A2
	SOJG	A4,MSGR01

MSGR02:	PUSHJ	P,INPCHR
	JRST	MAKERE
	CAIN	A0,":"			;TERMINATOR?
	JRST	MSGR02

MSGR03:	SETZ	A5,			;ASSUME *ALL
	CAMN	A3,STARB		;IS IT?
	JRST	MSGR05
	SETO	A5,
	MOVEI	A6,SHIPS
	MOVE	A4,NPLARS
	MOVEI	A7,(A10)		;SAVE SENDERS SHIP

MSGR04:	CAMN	A3,@SHPNAM(A6)		;RIGHT NAME?
	JRST	MSGR05			;YES
	ADDI	A6,SHPLEN
	SOJG	A4,MSGR04
	MOVEI	A1,MESG18		;"WHO?"
	PUSHJ	P,OUTSTR
	JRST	MAKCLR

MSGR05:	MOVE	A3,[POINT 7,GENWK1]

MSGR06:	PUSHJ	P,INPCHR
	JRST	MSGR07
	IDPB	A0,A3			;ACCUMULATE 
	JRST	MSGR06

MSGR07:	SETZ	A0,
	IDPB	A0,A3			;TERMINATE
	JUMPE	A5,MSGR08		;FOR *ALL?
	MOVEI	A10,(A6)		;RECIEVER
	MOVEI	A1,MESG19		;"MESSAGE FROM "
	PUSHJ	P,OUTSTR
	MOVE	A1,SHPNAM(A7)
	PUSHJ	P,OUTRPT
	MOVEI	A1,MESG20		;" : "
	PUSHJ	P,OUTSTR
	MOVE	A1,[POINT 7,GENWK1]
	PUSHJ	P,OUTSTR
	PUSHJ	P,OUTCRL
	XCT	SHPOUU(A10)		;FORCE TYPEOUT
	MOVEI	A10,(A7)
	POPJ	P,

MSGR08:	MOVEI	A7,(A10)		;SAVE SENDER
	MOVEI	A10,SHIPS
	MOVE	A4,NPLARS

MSGR09:	CAIN	A10,(A7)
	JRST	MSGR10
	MOVEI	A1,MESG21		;"MSG TO ALL FROM "
	PUSHJ	P,OUTSTR
	MOVE	A1,SHPNAM(A7)
	PUSHJ	P,OUTRPT
	MOVEI	A1,MESG20
	PUSHJ	P,OUTSTR
	MOVE	A1,[POINT 7,GENWK1]
	PUSHJ	P,OUTRPT
	PUSHJ	P,OUTCRL
	XCT	SHPOUU(A10)		;FORCE OUTPUT

MSGR10:	ADDI	A10,SHPLEN
	SOJG	A4,MSGR09
	MOVEI	A10,(A7)
	POPJ	P,
	SUBTTL	CHGORE ROUTINE
CHGORE:	MOVE	A4,A1			;COPY INDEX
	MOVE	A1,SHPCRF(A10)		;FORWARD FACING
	MOVEI	A2,GENWK1
	PUSHJ	P,NVFUNC
	MOVE	A1,SHPCRU(A10)		;UPWARD FACING
	MOVEI	A2,GENWK2
	PUSHJ	P,NVFUNC
	JRST	.+1(A4)			;DISPATCH
	JRST	CHG010
	JRST	CHG020
	JRST	CHG030
	JRST	CHG040
	JRST	CHG050
	JRST	CHG060

; LEFT TURN
CHG010:	HRREI	A3,-1
	CAIA

; RIGHT TURN
CHG020:	MOVEI	A3,1
	MOVEI	A1,GENWK1
	MOVEI	A2,GENWK2
	PUSHJ	P,CROSS
	JRST	CHG070

; TURN UP
CHG030:	MOVSI	A1,-3
CHG034:	MOVE	A2,GENWK2(A1)
	MOVN	A0,GENWK1(A1)
	MOVEM	A0,GENWK2(A1)
	MOVEM	A2,GENWK1(A1)
	AOBJN	A1,CHG034
	JRST	CHG070

; TURN DOWN
CHG040:	MOVSI	A1,-3
CHG044:	MOVE	A2,GENWK1(A1)
	MOVN	A0,GENWK2(A1)
	MOVEM	A0,GENWK1(A1)
	MOVEM	A2,GENWK2(A1)
	AOBJN	A1,CHG044
	JRST	CHG070

; ROLL RIGHT
CHG050:	SKIPA A3,[-1]

; ROLL LEFT
CHG060:	MOVEI A3,1
	MOVEI	A1,GENWK2
	MOVEI	A2,GENWK1
	PUSHJ	P,CROSS

CHG070:	MOVEI	A1,GENWK1
	PUSHJ	P,VNFUNC
	MOVEM	A0,SHPCRF(A10)		;NEW FORWARD FACING
	MOVEI	A1,GENWK2
	PUSHJ	P,VNFUNC
	MOVEM	A0,SHPCRU(A10)		;NEW UPWARD FACING
	POPJ	P,
	SUBTTL	CROSS ROUTINE
CROSS:	MOVE	A4,1(A1)
	IMUL	A4,2(A2)
	MOVE	A5,2(A1)
	IMUL	A5,1(A2)
	SUB	A4,A5
	MOVE	A11,A4

	MOVE	A4,2(A1)
	IMUL	A4,(A2)
	MOVE	A5,(A1)
	IMUL	A5,2(A2)
	SUB	A4,A5
	MOVE	A12,A4

	MOVE	A4,(A1)
	IMUL	A4,1(A2)
	MOVE	A5,1(A1)
	IMUL	A5,(A2)
	SUB	A4,A5
	MOVE	A13,A4

	MOVSI	A4,-3

CROSSL:	MOVE	A5,A11(A4)
	IMUL	A5,A3
	MOVEM	A5,(A1)
	AOJ	A1,
	AOBJN	A4,CROSSL
	POPJ	P,
	SUBTTL	MOBILE RADAR ROUTINE
MOBRDR:	PUSHJ	P,INPCHR		;FIND DATA
	JRST	MOBR03			;DEFAULTED
	HRLZI	A2,-3
	JRST	MOBR02

MOBR01:	PUSHJ	P,INPCHR
	JRST	MOBR03

MOBR02:	CAIN	A0,040			;BLANK?
	JRST	MOBR01
	CAIN	A0,","
	JRST	MOBR01
	SUBI	A0,060
	JUMPL	A0,MOBR03
	CAILE	A0,11
	JRST	MOBR03
	MOVEM	A0,A11(A2)		;REMEMBER INDEX
	AOBJN	A2,MOBR01
	MOVEM	A11,SHPMRX(A10)
	MOVEM	A12,SHPMRY(A10)
	MOVEM	A13,SHPMRZ(A10)
	PUSHJ	P,INPCHR
	CAIA
	JRST	.-2

MOBR03:	SKIPE	SUPPRT			;SUPPRESS PRINT?
	JRST	MOBR05
	MOVEI	A2,SHPMRX(A10)		;MR PARAMETERS
	HRLI	A2,-3
	MOVE	A3,[POINT 7,MESG22,20]

MOBR04:	MOVE	A0,(A2)			;PICK UP INDEX
	ADDI	A0,060
	IDPB	A0,A3
	IBP	A3			;SKIP
	IBP	A3
	AOBJN	A2,MOBR04
	MOVEI	A1,MESG22
	PUSHJ	P,OUTSTR

MOBR05:	MOVE	A1,SHPCRF(A10)		;FORWARD FACING
	MOVEI	A2,GENWK2
	PUSHJ	P,NVFUNC
	MOVE	A1,SHPCRU(A10)		;UPWARD FACING
	MOVEI	A2,GENWK3
	PUSHJ	P,NVFUNC
	MOVE	A1,GENWK2
	ADD	A1,GENWK2+1
	ADD	A1,GENWK2+2
	MOVEM	A1,SUMWK2
	MOVE	A1,GENWK3
	ADD	A1,GENWK3+1
	ADD	A1,GENWK3+2
	MOVEM	A1,SUMWK3
	MOVEI	A3,SHPMRX(A10)
	MOVSI	A2,-3

MOBR06:	PUSHJ	P,CORSEL		;SELECT COORDINATE
	MOVEI	A0,1
	JUMPGE	A1,.+3
	MOVN	A0,A0
	MOVM	A1,A1
	IMUL	A0,(A3)
	SOJ	A1,
	MOVE	A6,A1
	ADDI	A6,(A10)
	ADD	A0,(A6)
	MOVEM	A0,GENWK1(A1)
	AOJ	A3,
	AOBJN	A2,MOBR06
	MOVEI	A0,SHPCRF(A10)
	MOVEI	A1,GENWK1
	PJRST	PRTRDR			;PERFORM RADAR
	SUBTTL	FORWARD RADAR ROUTINE
FORRDR:	CAIE	A0,"R"			;COULD THERE BE A NUMBER?
	JRST	FORD02			;NO

FORD01:	PUSHJ	P,INPCHR
	JRST	FORD02
	CAIN	A0," "
	JRST	FORD01
	SUBI	A0,060
	JUMPL	A0,MAKERC
	CAIL	A0,10
	JRST	MAKERC
	MOVEM	A0,SHPFRD(A10)		;FORWARD RANGE
	PUSHJ	P,INPCHR		;CLEAR INPUT
	CAIA
	JRST	.-2

FORD02:	MOVE	A1,SHPCRF(A10)
	MOVEI	A2,GENWK1
	PUSHJ	P,NVFUNC
	MOVE	A0,SHPFRD(A10)
	ADDI	A0,060
	DPB	A0,[POINT 7,MESG23+1,34]
	MOVEI	A1,MESG23		;"DISP = N"
	PUSHJ	P,OUTSTR
	MOVE	A0,SHPCRU(A10)
	SOJ	A0,
	TRNN	A0,1
	ADDI	A0,2
	SETOM	FRFLAG			;FORWARD RADAR FMT
	MOVEM	A0,GENWK4
	MOVE	A0,SHPCRF(A10)
	MOVEM	A0,GENWK4+1
	MOVE	A1,SHPFRD(A10)
	MOVSI	A2,-3

FORD03:	MOVE	A0,GENWK1(A2)
	IMUL	A0,A1
	ADD	A0,(A10)
	MOVEM	A0,GENWK1(A2)
	AOJ	A10,
	AOBJN	A2,FORD03
	SUBI	A10,3
	MOVEI	A0,GENWK4		;DIRECTION NUMBERS
	MOVEI	A1,GENWK1
	PUSHJ	P,PRTRDR
	SETZM	FRFLAG
	POPJ	P,
	SUBTTL	CORSEL COORDINATE SELECTOR
;	ROUTINE TO SELECT THE CURRENT FORWARD AXIS (LH(A2)=-3),
;	CURRENT UPWARD AXIS (LH(A2)=-2), OR THE LEFT TO RIGHT AXIS
;	(LH(A2)=-1).
;	THIS ROUTINE MAPS THE COORDINATE DISPLACEMENT TYPED IN BY THE
;	PLAYER INTO THE ABSOLUTE X, Y, Z COORDINATES USED INTERNALLY.
;	A 1, 2, OR 3 IS RETURNED IN A1 WHICH INDICATES RESPECTIVELY
;	THAT THE X, Y, OR Z AXIS IS THE FORWARD, UPWARD, OR
;	LEFT-RIGHT AXIS.  THE RETURNED VALUE IS ALSO POSITIVE
;	OR NEGATIVE WHICH INDICATES THAT THE SHIP IS ORIENTED
;	IN THE POSITIVE OR NEGATIVE DIRECTION.

CORSEL:	HLRE	A1,A2			;COPY CODE
	JRST	.+4(A1)			;DISPATCH
	JRST	CORS30
	JRST	CORS20
	MOVSI	A1,-3			;LAST

CORS10:	SKIPE	GENWK2(A1)
	CAIA
	SKIPE	GENWK3(A1)
CORS12:	AOBJN	A1,CORS10
	MOVEI	A1,1(A1)
	IMUL	A1,SUMWK2
	IMUL	A1,SUMWK3
	POPJ	P,

CORS20:	MOVSI	A1,-3			;SECOND
	SKIPN	GENWK3(A1)
	AOBJN	A1,.-1
	MOVEI	A1,1(A1)
	IMUL	A1,GENWK3-1(A1)
	POPJ	P,

CORS30:	MOVSI	A1,-3			;FIRST
	SKIPN	GENWK2(A1)
	AOBJN	A1,.-1
	MOVEI	A1,1(A1)
	IMUL	A1,GENWK2-1(A1)
	POPJ	P,
	SUBTTL	PRTRDR ROUTINE
PRTRDR:	PUSH	P,A0			;SAVE A0
	PUSH	P,A1
	SKIPN	FRFLAG
	JRST	PRDR01
	MOVEI	A2,GENWK2
	MOVE	A1,@A0			;GET FF
	PUSHJ	P,NVFUNC
	MOVE	A1,-1(P)		;RECOVER A0
	MOVE	A1,1(A1)		;GET UF
	MOVEI	A2,GENWK3
	PUSHJ	P,NVFUNC
	MOVE	A0,GENWK2
	ADD	A0,GENWK2+1
	ADD	A0,GENWK2+2
	MOVEM	A0,SUMWK2
	MOVE	A0,GENWK3
	ADD	A0,GENWK3+1
	ADD	A0,GENWK3+2
	MOVEM	A0,SUMWK3

; S=SUM(FRF)*SUM(URF)*LSIGN((FF+1)/2,(UF+1)/2)

PRDR01:	MOVE	A1,-1(P)		;RESTORE A0
	MOVE	A2,(A1)			;GET FF
	MOVE	A3,1(A1)		;AND UF
	AOJ	A2,
	AOJ	A3,
	ASH	A2,-1
	ASH	A3,-1
	SOJ	A2,
	SOJ	A3,
	IMULI	A2,3
	ADD	A2,A3
	MOVE	A6,LSIGN(A2)
	IMUL	A6,SUMWK2
	IMUL	A6,SUMWK3

; LRF(J)=(1-IABS(FRF(J)+URF(J)))*S
	MOVSI	A2,-3

PRDR02:	MOVE	A1,GENWK2(A2)
	ADD	A1,GENWK3(A2)
	MOVM	A1,A1
	MOVEI	A0,1
	SUB	A0,A1
	IMUL	A0,A6
	MOVEM	A0,GENWK5(A2)
	AOBJN	A2,PRDR02
; TAKE EACH SHIP AND FILL IN 'CUBEWK'
; WITH THE APPROPRIATE SHIP NUMBERS IN ASCII.
	MOVEI	A4,SHIPS
	MOVN	A3,NPLARS
	HRLZ	A3,A3

PRDR03:	MOVEI	A2,061(A3)		;THIS SHIP'S NUMBER
	MOVE	A1,SHPCRX(A4)
	SOJ	A1,
	IMULI	A1,=64
	MOVE	A0,SHPCRY(A4)
	SOJ	A0,
	IMULI	A0,10
	ADD	A1,A0
	MOVE	A0,SHPCRZ(A4)
	SOJ	A0,
	ADD	A1,A0
	MOVEM	A2,CUBEWK(A1)		;FILL ADDRESSED LOCATION
	ADDI	A4,SHPLEN
	AOBJN	A3,PRDR03
	MOVE	A1,(P)			;RECOVER A1

; F=FRF(1)*X +FRF(2)*Y +FRF(3)*Z
	MOVE	A0,(A1)
	IMUL	A0,GENWK2
	MOVE	A3,1(A1)
	IMUL	A3,GENWK2+1
	ADD	A0,A3
	MOVE	A3,2(A1)
	IMUL	A3,GENWK2+2
	ADD	A0,A3
	MOVEM	A0,GENWK6

; U=URF(1)*X +URF(2)*Y +URF(3)*Z
	MOVE	A0,(A1)
	IMUL	A0,GENWK3
	MOVE	A3,1(A1)
	IMUL	A3,GENWK3+1
	ADD	A0,A3
	MOVE	A3,2(A1)
	IMUL	A3,GENWK3+2
	ADD	A0,A3
	MOVEM	A0,GENWK6+1

; L=LRF(1)*X +LRF(2)*Y +LRF(3)*Z
	MOVE	A0,(A1)
	IMUL	A0,GENWK5
	MOVE	A3,1(A1)
	IMUL	A3,GENWK5+1
	ADD	A0,A3
	MOVE	A3,2(A1)
	IMUL	A3,GENWK5+2
	ADD	A0,A3
	MOVEM	A0,GENWK6+2

; FILL IN THE SCREEN
	MOVSI	A2,-11

PRDR04:	MOVE	A3,UOFSET(A2)
	ADD	A3,GENWK6+1
	MOVE	A4,LOFSET(A2)
	ADD	A4,GENWK6+2

; (A5,A6,A7)_FRF(J)*F +URF(J)*A3 +LRF(J)*A4
	MOVSI	A11,-3

PRDR05:	MOVE	A0,GENWK2(A11)
	IMUL	A0,GENWK6
	MOVE	A1,GENWK3(A11)
	IMUL	A1,A3
	ADD	A0,A1
	MOVE	A1,GENWK5(A11)
	IMUL	A1,A4
	ADD	A0,A1
	MOVEM	A0,5(A11)
	AOBJN	A11,PRDR05

	JUMPLE	A5,PRDR06		;CHECK FOR CUBE WALL
	JUMPLE	A6,PRDR06
	JUMPLE	A7,PRDR06
	CAMLE	A5,CUBSIZ
	JRST	PRDR06
	CAMLE	A6,CUBSIZ
	JRST	PRDR06
	CAMLE	A7,CUBSIZ
	JRST	PRDR06

; SCREEN(J,K) = CUBEWK(A5,A6,A7)
	SOJ	A5,
	SOJ	A6,
	SOJ	A7,
	IMULI	A5,=64
	IMULI	A6,10
	ADD	A5,A6
	ADD	A5,A7
	MOVE	A5,CUBEWK(A5)
	MOVEM	A5,SCREEN(A2)
	CAIN	A5,"-"			;EMPTY?
	JRST	PRDR07
	SUBI	A5,060
	CAMN	A5,SHPNUM(A10)		;OWN SHIP?
	JRST	PRDR07
	SKIPE	FRFLAG			;FORWARD RADAR
	JRST	PRDR07
	SOJ	A5,
	IMULI	A5,SHPLEN
	MOVEI	A6,(A10)		;SAVE SENDER
	MOVEI	A10,SHIPS(A5)
	MOVEI	A1,MESG24		;"BEING SCANNED"
	PUSHJ	P,OUTSTR
	XCT	SHPOUU(A10)		;FORCE OUTPUT
	MOVEI	A10,(A6)
	JRST	PRDR07

PRDR06:	MOVEI	A5,"*"
	MOVEM	A5,SCREEN(A2)

PRDR07:	AOBJN	A2,PRDR04
	SKIPE	SUPPRT			;TRACE?
	JRST	PRDR09
	MOVSI	A2,-11
	MOVE	A3,[POINT 7,MESG25]

PRDR08:	MOVE	A0,SCREEN(A2)		;GET TYPEOUT
	IDPB	A0,A3
	IBP	A3
	IBP	A3
	AOBJN	A2,PRDR08
	MOVEI	A1,MESG25		;THE SCAN
	PUSHJ	P,OUTSTR

PRDR09:	MOVEI	A0,"-"			;EMPTINESS
	MOVE	A1,[-=512,,CUBEWK]
	MOVEM	A0,(A1)
	AOBJN	A1,.-1
	POP	P,A1
	POP	P,A0
	POPJ	P,
	SUBTTL	MATHEMATICAL UTILITIES
IFIX:	MOVEM	A0,FIXWRK		;SAVE SIGN
	MOVM	A0,A0
	MULI	A0,400
	EXCH	A0,A1
	ASH	A0,-243(A1)
	SKIPGE	FIXWRK
	MOVNS	A0,0
	POPJ	P,

NVFUNC:	PUSH	P,A3			;SAVE A3
	HRLI	A2,-3
NVFNC1:	SETZM	(A2)			;ASSUME CLEAR
	HLRE	A3,A2			;ASSUME CLEAR
	MOVEI	A0,4
	ADD	A0,A3
	MOVE	A3,A1
	AOJ	A3,
	ASH	A3,-1
	CAME	A3,A0
	JRST	NVFNC2
	ASH	A0,2
	MOVE	A3,A1
	ASH	A3,1
	SUB	A3,A0
	ADDI	A3,1
	MOVN	A3,A3
	MOVEM	A3,(A2)
NVFNC2:	AOBJN	A2,NVFNC1
	POP	P,A3
	POPJ	P,

VNFUNC:	PUSH	P,A2
	HRLI	A1,-3
	MOVEI	A2,4
VNFNC1:	SKIPN	(A1)
	JRST	VNFNC2
	MOVE	A0,A2
	SUB	A0,(A1)
	SUBI	A0,1
	ASH	A0,-1
VNFNC2:	ADDI	A2,4
	AOBJN	A1,VNFNC1
	POP	P,A2
	POPJ	P,
	SUBTTL	FACING ROUTINE
FACING:	MOVE	A2,[POINT 7,MESG26]
	MOVE	A3,SHPCRU(A10)		;UPWARD FACING
	MOVE	A3,FACNAM-1(A3)
	IDPB	A3,A2
	ASH	A3,-7
	IDPB	A3,A2
	IBP	A2
	IBP	A2
	MOVE	A3,SHPCRF(A10)		;FORWARD FACING
	MOVE	A3,FACNAM-1(A3)
	IDPB	A3,A2
	ASH	A3,-7
	IDPB	A3,A2
	MOVE	A2,[POINT 7,MESG26+2,6]
	MOVEI	A4,(A10)
	HRLI	A4,-3

FACNG1:	MOVE	A0,(A4)			;GET COORDINATE
	ADDI	A0,060			;MAKE INTO ASCII
	IDPB	A0,A2
	IBP	A2
	IBP	A2
	AOBJN	A4,FACNG1
	MOVEI	A1,MESG26		;INFORMATION LINE
	PJRST	OUTSTR
	SUBTTL	RATING ROUTINE
RATING:	MOVEI	A1,MESG27		;HEADER LINE
	PUSHJ	P,OUTSTR
	MOVEI	A5,SHIPS
	MOVN	A4,NPLARS
	MOVS	A4,A4
	HRRI	A4,1

RATNG1:	MOVE	A2,[POINT 7,MESG28]
	MOVE	A1,SHPNUM(A5)
	ADDI	A1,060
	IDPB	A1,A2
	IBP	A2
	IBP	A2
	IBP	A2
	MOVE	A3,SHPNAM(A5)
	MOVEI	A6,=18

RATNG2:	ILDB	A0,A3
	JUMPE	A0,RATNG3
	IDPB	A0,A2
	SOJA	A6,RATNG2

RATNG3:	MOVEI	A0," "
	IDPB	A0,A2
	SOJG	A6,.-1
	MOVM	A6,SHPRAT(A5)		;RATING
	MOVEI	A1,5

RATNG4:	IDIVI	A6,12
	ADDI	A7,060
	PUSH	P,A7
	JUMPE	A6,RATNG8		;IF DONE
	SOJG	A1,RATNG4
	JRST	RATNG7

RATNG6:	MOVEI	A7," "
	PUSH	P,A7

RATNG8:	SOJG	A1,RATNG6

RATNG7:	MOVEI	A1,5			;ASSUMED LENGTH
	SKIPL	SHPRAT(A5)
	JRST	RATNG5
	MOVEI	A1,4
	POP	P,A0
	MOVEI	A0,"-"
	IDPB	A0,A2

RATNG5:	POP	P,A0
	IDPB	A0,A2
	SOJG	A1,RATNG5

	MOVEI	A1,3
	SUB	A1,SHPHIT(A5)
	ADDI	A1,060
	DPB	A1,[POINT 7,MESG28+6,27]
	MOVE	A6,SHPBLZ(A5)
	IDIVI	A6,12
	ADDI	A6,060
	MOVE	A2,[POINT 7,MESG28+8,6]
	DPB	A6,A2
	ADDI	A7,060
	IDPB	A7,A2
	MOVE	A2,[POINT 7,MESG28+9,27]
	MOVE	A6,SHPRNC(A5)
	IDIVI	A6,12
	ADDI	A6,060
	ADDI	A7,060
	DPB	A6,A2
	IDPB	A7,A2
	MOVEI	A1,MESG28
	PUSHJ	P,OUTSTR
	ADDI	A5,SHPLEN
	AOBJN	A4,RATNG1
	POPJ	P,
	SUBTTL	TRACE ROUTINES
TRACEA:	MOVE	A2,SHPTRC(A10)		;GET TRACE POINTER
	JUMPE	A2,TRACEB		;TRY TO MAKE TRACE
	PUSHJ	P,INPCHR
	CAIA
	JRST	.-2

TRACA1:	SOJ	A2,
	IMULI	A2,SHPLEN
	ADDI	A2,SHIPS
	MOVE	A3,[POINT 7,MESG29+3]
	HRLI	A2,-3

TRACA2:	MOVE	A0,(A2)			;GET COORDINATE
	ADDI	A0,060
	IDPB	A0,A3
	IBP	A3
	IBP	A3
	AOBJN	A2,TRACA2
	MOVEI	A1,MESG29
	PUSHJ	P,OUTSTR
	MOVEI	A3,(A10)		;SAVE TRACING SHIP
	MOVEI	A10,-3(A2)		;GET TRACED SHIP
	MOVEI	A1,MESG24		;"BEING SCANNED"
	PUSHJ	P,OUTSTR
	XCT	SHPOUU(A10)		;FORCE OUTPUT
	MOVEI	A10,(A3)
	POPJ	P,

TRACEB:	SETOM	SUPPRT			;SUPPRESS PRINT
	PUSHJ	P,MOBRDR
	SETZM	SUPPRT
	MOVSI	A1,-11

TRACB1:	MOVE	A2,SCREEN(A1)		;INSPECT SPACE
	CAIN	A2,"*"			;CUBE EDGE?
	JRST	TRACB2
	CAIE	A2,"-"			;VOID?
	JRST	TRACB3			;NO, A SHIP

TRACB2:	AOBJN	A1,TRACB1
	MOVEI	A1,MESG30		;"NOBODY THERE"
	PJRST	OUTSTR

TRACB3:	SUBI	A2,060			;MAKE NUMBER
	CAMN	A2,SHPNUM(A10)		;MY OWN?
	JRST	TRACB2
	MOVEM	A2,SHPTRC(A10)		;TRACE IS ON
	JRST	TRACA1			;SHOW HIS POSITION
	SUBTTL	RENAME ROUTINE
RENAMP:	MOVE	A2,SHPNAM(A10)		;POINT TO NAME
	HRRZ	A1,A2
	SETZM	(A1)
	SETZM	1(A1)
	SETZM	2(A1)
	SETZM	3(A1)
	MOVEI	A3,=18

RENAM1:	PUSHJ	P,INPCHR
	JRST	RENAM3
	CAME	A2,SHPNAM(A10)		;LEADING CHAR?
	JRST	RENAM2
	CAIN	A0," "
	JRST	RENAM1

RENAM2:	IDPB	A0,A2
	SOJG	A3,RENAM1
	PUSHJ	P,INPCHR
	CAIA
	JRST	.-2
	MOVEI	A1,MESG14
	PUSHJ	P,OUTSTR

RENAM3:	MOVE	A0,SHPNUM(A10)
	ADDI	A0,060
	DPB	A0,[POINT 7,MESG36+1,34]
	MOVEI	A7,(A10)
	MOVEI	A10,SHIPS
	MOVE	A2,NPLARS

RENAM4:	MOVEI	A1,MESG36		;PLAYER NOW NAMED
	PUSHJ	P,OUTSTR
	MOVE	A1,SHPNAM(A7)
	PUSHJ	P,OUTRPT
	PUSHJ	P,OUTCRL
	XCT	SHPOUU(A10)
	ADDI	A10,SHPLEN
	SOJG	A2,RENAM4
	MOVEI	A10,(A7)
	POPJ	P,
	SUBTTL	CUBESIZE ROUTINE
CBSIZP:	CAIE	A10,SHIPS		;FIRST PLAYER?
	JRST	MAKERC
CBSIZ1:	PUSHJ	P,INPCHR
	JRST	MAKERE
	CAIN	A0,"U"			;EXTRA CHARACTER?
	JRST	CBSIZ1
	CAIN	A0," "
	JRST	CBSIZ1
	DPB	A0,[POINT 7,MESG37+3,27]
	SUBI	A0,060
	JUMPLE	A0,MAKERC
	CAILE	A0,10
	JRST	MAKERC
	MOVEM	A0,CUBSIZ
	FSC	A0,233
	MOVEM	A0,CUBSZF
	MOVEI	A10,SHIPS
	MOVE	A3,NPLARS

CBSIZ2:	HRLI	A10,-3
	MOVE	A2,[POINT 7,MESG37+7,13]

CBSIZ3:	PUSHJ	P,RANDOM
	FMPR	A0,CUBSZF
	FADRI	A0,(1.0)
	PUSHJ	P,IFIX
	MOVEM	A0,(A10)
	ADDI	A0,060
	IDPB	A0,A2
	IBP	A2
	IBP	A2
	AOBJN	A10,CBSIZ3
	SUBI	A10,3
	MOVEI	A1,MESG37		;"CUBE SIZE IS NOW ",
	PUSHJ	P,OUTSTR		;"YOU ARE NOW AT "
	XCT	SHPOUU(A10)
	ADDI	A10,SHPLEN
	SOJG	A3,CBSIZ2
	MOVEI	A10,SHIPS
	POPJ	P,
	SUBTTL	INITIALIZATION ROUTINE
INITAL:	MOVEI	A1,6			;DEFAULT CUBESIZE
	MOVEM	A1,CUBSIZ
	MOVSI	A1,(6.0)
	MOVEM	A1,CUBSZF
	MOVEI	A1,"-"			;VOID MARKER
	MOVE	A2,[-=512,,CUBEWK]
	MOVEM	A1,(A2)
	AOBJN	A2,.-1

INIT01:	TTCALL	3,MESG31		;"HOW MANY PLAYERS?"
	TTCALL	0,A1
	SUBI	A1,060
	JUMPLE	A1,INIT01
	CAILE	A1,12
	JRST	INIT01
	MOVEM	A1,NPLARS
	CAIGE	A1,5			;CUBE TOO SMALL?
	JRST	INIT02
	MOVEI	A0,10
	MOVEM	A0,CUBSIZ
	MOVSI	A0,(8.0)
	MOVEM	A0,CUBSZF

INIT02:	TTCALL	3,MESG32		;"GIVE ME TTY NUMBERS"
	MOVEI	A7,SHIPS

INIT03:	TTCALL	0,A2			;GET HIGH DIGIT
	SUBI	A2,060
	JUMPL	A2,INIT07
	CAILE	A2,7
	JRST	INIT07
	ASH	A2,3
	TTCALL	0,A3
	SUBI	A3,060
	JUMPL	A3,INIT07
	CAILE	A3,7
	JRST	INIT07
	MOVEI	A0," "
	TTCALL	1,A0
	ADD	A2,A3
	TRO	A2,200000		;ADD TTY BITS
	MOVEM	A2,SHPTTY(A7)
	ADDI	A7,SHPLEN
	SOJG	A1,INIT03
	MOVEI	A7,SHIPS		;NOW TRY TO INIT THEN
	MOVE	A2,NPLARS

INIT04:	PUSHJ	P,INITTY
	JRST	INIT08			;CAN'T OPEN TTY
	ADDI	A7,SHPLEN
	SOJG	A2,INIT04
	TTCALL	3,MESG38
	MOVEI	A10,SHIPS
	MOVE	A7,NPLARS

INIT05:	MOVEI	A1,MESG33		;"GIVE ME YOUR NAME"
	PUSHJ	P,OUTSTR
	XCT	SHPOUU(A10)
	SETZM	SHPBLZ(A10)		;MY INDICATOR
	ADDI	A10,SHPLEN
	SOJG	A7,INIT05
	PUSHJ	P,GETNAM		;GET NAMES
	TTCALL	3,MESG34
	MOVEI	A10,SHIPS
	MOVE	A7,NPLARS

INIT06:	MOVEI	A1,MESG34		;"LET THE WAR BEGIN"
	PUSHJ	P,OUTSTR
	XCT	SHPOUU(A10)
	ADDI	A10,SHPLEN
	SOJG	A7,INIT06
	POPJ	P,

INIT07:	TTCALL	3,MESG35		;"BAD TTY #"
	JRST	INIT03

INIT08:	TTCALL	3,MESG17		;"CANT GET TO TTY"
	MOVE	A1,NPLARS
	JRST	INIT02			;START OVER
	SUBTTL	NAME GETTING ROUTINE
GETNAM:	MOVEI	A10,SHIPS		;READY FOR QUERY
	MOVE	A6,NPLARS

GETNM1:	PUSHJ	P,QUERY
	JRST	GETNM2			;INTERPRET
	MOVSI	A1,20
	HIBER	A1,			;WAIT FOR TTY LINE
	HALT
	JRST	GETNM1

GETNM2:	SKIPE	SHPBLZ(A10)		;NAME ALREADY THERE?
	JRST	GETNM7			;YES
	MOVE	A2,SHPNAM(A10)		;POINT TO NAME
	MOVEI	A3,=18
	HRRZ	A1,A2
	SETZM	(A1)
	SETZM	1(A1)
	SETZM	2(A1)
	SETZM	3(A1)

GETNM3:	PUSHJ	P,INPCHR
	JRST	GETNM5
	CAME	A2,SHPNAM(A10)		;LEADING BLANKS?
	JRST	GETNM4
	CAIN	A0," "
	JRST	GETNM3

GETNM4:	IDPB	A0,A2
	SOJG	A3,GETNM3
	MOVEI	A1,MESG14		;"NAME TOO LONG"
	PUSHJ	P,OUTSTR
	XCT	SHPOUU(A10)
	JRST	GETNM7			;RETRY

GETNM5:	CAMN	A2,SHPNAM(A10)		;NULL NAME?
	JRST	GETNM6
	PUSHJ	P,INIPLR		;FILL IN SHIP BLOCK
	SETZM	SHPRNC(A10)		;NO DEATHS YET
	SETZM	SHPRAT(A10)
	SOJG	A6,GETNM1
	POPJ	P,			;ALL READY

GETNM6:	MOVEI	A1,MESG16		;"NO NULL NAMES"
	PUSHJ	P,OUTSTR
	XCT	SHPOUU(A10)
	JRST	GETNM1

GETNM7:	PUSHJ	P,INPCHR
	JRST	GETNM1
	JRST	.-2
	SUBTTL	TELETYPE INITIALIZER
INITTY:	MOVE	A5,SHPTTY(A7)		;GET TTY NUMBER
IFN CMU,{	TRZ	A5,200000		;CLEAR TRMNO. BIT
	MOVE	A11,A5
	TRZ	A5,000007
	ASH	A5,3
	TRZ	A11,000070
	ADD	A5,A11
	TRO	A5,202020
	HRLI	A5,646471
	MOVEI	A4,1			;SET LINE MODE
	MOVEI	A6,SHPINB(A7)
	HRLI	A6,SHPOUB(A7)
	MOVE	A11,SHPOUU(A7)		;FIND OUTPUT UUO
	TLZ	A11,777000		;KILL UUO CODE
	TLO	A11,050000		;ADD OPEN CODE
	HRRI	A11,A4
	XCT	A11
	POPJ P,		;FAILED
}
IFN ITS,{	MOVE A11,A5
	ROT A11,-3	;GET FIRST 3 BITS
	MOVEI A5,(A11)
	LSH A5,6
	ROT A11,3
	ANDI A11,7
	ADDI A5,(A11)
	ADDI A5,'T00'	;GET TNN
	HRLI A5,0	;SET UP MODE (UNIT ASCII IN)
	MOVE A4,SHPNUM(A7)	;FIND PLAYER # (TO GET CHANNEL # FROM)
	LSH A4,1
	SUBI A4,2	;INPUT CHANNEL IS <#*2>-2
	HRRZI A6,A5	;EFF ADDR FOR .OPEN
	HLL A6,OPNTAB(A4)	; .OPEN CH,
	XCT A6
	POPJ P,		;INPUT OPEN FAILED
	CAIN A4,TYIC
	SETZM TTYSTI
	ADDI A4,1	;OUTPUT CH= INPUT+1
	HLL A6,OPNTAB(A4)
	HRLI A5,3	;MODE=BLOCK OUT
	XCT A6
	POPJ P,		;FAILED
	CAIN A4,TYOC
	SETZM TTYSTO

	SETOM CHNCNT(A4)	;SET RANDOM VARIABLES FOR EACH CH
	MOVEI A5,CHBFMX
	MOVEM A5,SHPOUB+2(A7)	;SET UP BUFFER CNT
	MOVE A5,CHSTPT(A4)	;PTR INTO BUFFER
	MOVEM A5,SHPOUB+1(A7)
	MOVEI A5,SHPOUB+1(A7)
	MOVEM A5,CHTPGB(A4)	;SAVE INDEX TO BLK

	SOJ A4,
	SETOM CHNCNT(A4)
	SETZM SHPINB+2(A7)
	MOVEI A5,SHPINB+1(A7)
	MOVEM A5,CHTPGB(A4)
	MOVE A5,CHMSK(A4)	;GET BIT MSK
	.SUSET [.SIMSK2,,A5]	;ENABLE INPUT INTS. ON THIS CHANNEL
}
	MOVEM	A7,LSTSHP
	AOS	(P)
	POPJ	P,
	SUBTTL	RANDOM NUMBER GENERATOR
RANDOM:	MOVE	A0,RANNUM
	MUL	A0,RANLST
	ASHC	A0,4
	LSH	A1,-4
	ADD	A0,A1
	TLZE	A0,760000
	ADDI	A0,1
	MOVEM	A0,RANLST
	HLRZ	A1,A0
	FSC	A1,216
	HRLI	A0,0
	FSC	A0,174
	FAD	A0,A1
	POPJ	P,
	SUBTTL	TELETYPE I/O ROUTINES
OUTCHR:	SOSG	SHPOUB+2(A10)		;CHECK SPACE
	XCT	SHPOUU(A10)		;GET MORE
	IDPB	A0,SHPOUB+1(A10)	;INSERT CHARACTER
	POPJ	P,

OUTSTR:	HRLI	A1,440700		;ADD POINTER

OUTRPT:	ILDB	A0,A1			;GET CHARACTER
	JUMPE	A0,CPOPJ
	PUSHJ	P,OUTCHR
	JRST	OUTRPT

OUTCRL:	MOVEI	A0,015
	PUSHJ	P,OUTCHR
	MOVEI	A0,012
	PJRST	OUTCHR

INPCHR:	SOSGE	SHPINB+2(A10)		;CHARACTERS READY?
	XCT SHPINU(A10)
	ILDB	A0,SHPINB+1(A10)
	JUMPE	A0,INPCHR	;IGNORE NULLS
	CAIN	A0,033
	JRST	INPCH1	;TREAT ESC LIKE EOL
	CAIN	A0,015	;IGNORE CR
	JRST	INPCHR
	CAIE	A0,012		;LINE FEED? DO EOL HANDLING
	JRST	CPOPJ1	;ORDINARY RETURN

INPCH1:	SETZB	A0,SHPINB+2(A10)
IFN ITS,{	PUSH P,A1
	MOVE A1,SHPNUM(A10)	;GET PLAYER #
	LSH A1,1
	SUBI A1,2	;GET INPUT CH # FOR PLAYER
	SETOM CHNCNT(A1)	;INDICATE MUST INITIALIZE BUFFER
	MOVE A1,CHMSK(A1)	;GET BIT FOR THIS CHAN
	.SUSET [.SADF2,,A1]	;CLEAR DEFER BIT; ENABLE INTS FOR CHAN
	POP P,A1	;I.E. NOW FREE TO GET MORE CHARS INTO BUFFER
}
	POPJ	P,

IFN ITS,{
INT:	0
	0
	SKIPL I15,INT	;GET INT. BITS
	JRST INTFW	;HMM, NOT I/O INT.
	ANDI I15,177777	;IO CHANNEL FIELD- LAST 16. BITS
	JFFO I15,INT0	;GET CNT OF LEADING 0'S
	JRST INTRET	;NOTHING LEFT
INT0:	SUBI I16,=35	;GET -<# OF CH>
	MOVN I16,I16	;CH #
	ANDCM I15,CHMSK(I16)	;KILL THE BIT FOR CHAN WE'RE HANDLING
	MOVEM I15,INT	;AND SAVE

	MOVE I14,I16
	.ITYIC I14,
	JRST INT99	;NOT REALLY ANYTHING THERE
	XCT IOTTB(I16)	;GET CHAR INTO I14
	CAIN I14,177	;RUBOUT?
	JRST INTRBT
	AOSG I15,CHNCNT(I16)	;ADD ONE TO COUNT IN BUFFER
	JRST INTBFI	;IF ZERO, SIGN TO GO INITIALIZE BUFFER(RETURN TO INT20)
INT20:	CAIN I14,15	;CR?
	JRST INTCR
	CAILE I15,CHBFMX	;CHECK FOR BLOATED BUFFER
	JRST INT90	;THROW AWAY CHAR IF FULL
	IDPB I14,CHBFPT(I16)	;STORE

INT99:	SKIPE I15,INT	;GET INT. WD AGAIN
	JFFO I15,INT0	;MUNG IF ANYTHING LEFT
INTRET:	.DISMIS INT+1	;RETURN TO MAIN PROGRAM

INT90:	MOVE I14,CHMSK(I16)	;GET BIT MSK
	IORM I14,INAVAL	;AND INDICATE INPUT AVAILABLE
	.SUSET [.SIDF2,,I14]	;AND DEFER INTS FOR THIS CHAN
	JRST INT99

INTRBT:	MOVEI I15,1(I16)	;GET OUTPUT CH #
	SOSL CHNCNT(I16)	;DECREMENT CNT
	JRST INTRB5	;NOTHING LEFT
	LDB I14,CHBFPT(I16)	;GET LAST CHAR
	XCT IOTTB(I15)	;OUTPUT CHAR
	MOVE I15,CHBFPT(I16)	;DECREMENT POINTER.
	ADD I15,[70000,,0]	;INCREASE P
	SKIPG I15,	;SKIP
	SUB I15,[430000,,1]	;UNLESS WENT OFF EDGE...RESET
	MOVEM I15,CHBFPT(I16)	;STORE DECREMENTED PTR BACK
	JRST INT99
INTRB5:	MOVEI I14,15	;OUTPUT CR
	XCT IOTTB(I15)
	MOVEI I14,12	;AND LF
	XCT IOTTB(I15)
	SETZM CHNCNT(I16)	;ZERO CNT
	MOVE I15,CHSTPT(I16)	;GET PTR TO START
	MOVEM I15,CHBFPT(I16)	;AND SET UP
	JRST INT99

INTCR:	AOS I15,CHNCNT(I16)	;INCRMENT CNT AGAIN FOR LF
	IDPB I14,CHBFPT(I16)	;DEPOSIT CR
	MOVEI I14,12		;AND SUPPLY LF
	IDPB I14,CHBFPT(I16)
	MOVE I15,CHMSK(I16)	;AND NOW DEFER INTS ON THIS CHANNEL
	.SUSET [.SIDF2,,I15]
	IORM I15,INAVAL		;AND TURN ON BIT INDICATING INPUT AVAIL ON THIS CHAN.
	JRST INT99		;THRU WITH THIS CHAN
	
INTBFI:	MOVE I15,CHSTPT(I16)	;INITIALIZE...GET PTR TO START OF BUFFER
	MOVEM I15,CHBFPT(I16)	;STORE
	MOVEI I15,1	;AND CNT
	MOVEM I15,CHNCNT(I16)
	JRST INT20	;RETURN TO PROCESS INPUT CHAR

INTFW:	.VALUE		;STOP IF HIT INT. NOT PROVIDED FOR
	.DISMIS INT+1


INAVAL:	0	;BITS IN THIS WORD INDICATE INPUT AVAILABLE
CHTPGB:	BLOCK 20	;FOR EACH CH, ADDR+1 OF MAIN PROGRAM'S DEC-STYLE BLOCK
CHNCNT:	BLOCK 20
CHBFPT:	BLOCK 20
CHBFMX== =100	;# CHARS MAXIMUM IN EACH BUFF.
CHBFWL==<<CHBFMX+2>/5>+1	;FIND # WDS PER BUFFER (ENSURE ROOM FOR 2 EXTRA CHARS)
CHSTPT:	FOR C_0,17
{	440700,,CHBUFF+CHBFWL*C
}
CHBUFF:	BLOCK 20*CHBFWL	;ROOM FOR ALL BUFFERS

OPNTAB:	FOR C_0,17
{	.OPEN C,
}
CLSETB:	FOR C_0,17
{	.CLOSE C,
}
IOTTB:	FOR C_0,17
{	.IOT C,I14
}
CHMSK:	FOR C_0,17
{	1C
}

}	;END OF BIG CONDITIONAL

	SUBTTL	CONSTANTS
CMNDTB:	MAKCMC,,"L"
	MAKCMR,,"R"
	MAKCMC,,"U"
	MAKCMC,,"D"
	MAKCMM,,"M"
	MAKCMN,,"N"
	MAKCMF,,"F"
	CBSIZP,,"C"
	MAKMV1,,"B"
	TRACEA,,"P"
	TRACEB,,"T"
CMNDCT==.-CMNDTB

STARB:	ASCIZ	"*"
RANNUM:	4544,,503720

LSIGN:	OCT	0,1,777777777777,777777777777,0,1
	OCT	1,777777777777,0
LOFSET:	OCT	777777777777,0,1,777777777777,0,1
	OCT	777777777777,0,1
UOFSET:	OCT	1,1,1,0,0,0
	OCT	777777777777,777777777777,777777777777
FACNAM:	26053
	26055
	26253
	26255
	26453
	26455

MESG01:	ASCIZ	"What?
"
MESG02:	ASCIZ	"No
"
MESG03:	ASCIZ	"Not yet
"
MESG04:	ASCIZ	"Out of Blazers
"
MESG05:	ASCIZ	"Missed
"
MESG07:	ASCIZ	"Blazer hit on "
MESG08:	ASCIZ	"Trace on you has been broken
"
MESG09:	ASCIZ	"Trace lock has been broken
"
MESG10:	ASCIZ	"You have been killed by "
MESG11:	ASCIZ	" killed by "
MESG12:	ASCIZ	"You have been reincarnated
"
MESG14:	ASCIZ	"Name too long
"
MESG15:	ASCIZ	"Teletype number not given
"
MESG16:	ASCIZ	"Name not given
"
MESG17:	ASCIZ	"Unable to initialize teletype
"
MESG18:	ASCIZ	"Receiver not found
"
MESG19:	ASCIZ	"Message from "
MESG20:	ASCIZ	": "
MESG21:	ASCIZ	"
Msg to all from "
MESG24:	ASCIZ	"
*****Being Scanned!
"
MESG27:	ASCIZ	"                      RATING    HITS  BLZRS  DEATHS
"
MESG30:	ASCIZ	"No ship seen to Trace
"
MESG31:	ASCIZ	"How many players? 1-8 : "
MESG32:	ASCIZ	"
Enter TTY numbers, two digits each
: "
MESG33:	ASCIZ	"Enter name to identify your ship : "
MESG34:	ASCIZ	"All players ready, proceed with game
"
MESG35:	ASCIZ	"Bad TTY number
"
MESG38:	ASCIZ	"Obtaining Player names.
"
	SUBTTL	VARIABLES
STKL==100
STACK:	BLOCK	STKL

GENWK1:	BLOCK	3
GENWK2:	BLOCK	3
GENWK3:	BLOCK	3
GENWK4:	BLOCK	2
GENWK5:	BLOCK	3
GENWK6:	BLOCK	3

SUMWK2:	0
SUMWK3:	0

CUBEWK:	BLOCK	=512
SCREEN:	BLOCK	9

NPLARS:	0
LSTSHP:	0
CUBSIZ:	0
CUBSZF:	0
RANLST:	1,,-1
SUPPRT:	0
FRFLAG:	0
FIXWRK:	0

SHIPS:	FOR N_1,10
{	BLOCK =15
	N
	BLOCK 6
	INPUT N,
	OUTPUT N,
	0
	POINT 7,NAMES+<<N-1>*4>
}

NAMES:	BLOCK	40

MESG06:	ASCIZ	"
HIT #0 from "
MESG22:	ASCIZ	"
 0, 0, 0
"
MESG23:	ASCIZ	"
DIST = 0
"
MESG25:	ASCIZ	"0  0  0
0  0  0
0  0  0

"
MESG26:	ASCIZ	"+x
+x =>( 0, 0, 0)
"
MESG28:	ASCIZ	"0)                    00000      0      00      00
"
MESG29:	ASCIZ	"Traced ship = (0, 0, 0)
"
MESG36:	ASCIZ	"
Player 0 is now named "
MESG37:	ASCIZ	"
Cubesize is now 0
You are now at (0, 0, 0)
"

	END	CUBSTR
