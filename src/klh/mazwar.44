TITLE MAZE.3 GREG THOMPSON (GAT) 04/11/74
;
;	DEFINE IMLAC INSTRUCTION SET
;
.INSRT IMSRC;IMDEFS >
;
;	INSTRUCTIONS TO GAME
;
;				     MAZE
;
;       Maze  is  a  experiment  in  3  dimensional  graphics  and  intertask
;   teleconferencing.	 It is a hunt  and seek game that  can involve up to
;   eight Imlacs.   The Imlac user is  placed in a 16  by 32 square maze  and
;   attempts  to hunt down and destroy the other inhabitents of the maze (the
;   other Imlac  users) before  they do  the same  to him.   Each  player  is
;   represented by his uname (1 through 8 characters) as he moves through the
;   maze.   The  various keys that are  used to move through  the maze and to
;   fire are described below.
;
;      UP ARROW   - Move forward 1 square.
;      DOWN ARROW - Back up one square.
;      LEFT ARROW - Turn 90 degrees to the left.
;      RIGHT ARROW- Turn 90 degrees to the right.
;      FUNCTION 4 - Turn 180 degrees around.
;      PAGE XMIT  - Peek around the corner to the left.
;      XMIT	  - Peek around the corner to the right.
;      ESC	  - Fire.
;      CTRL -Z	  - Exit maze program.
;      FORM	  - Erase dispay buffer.
;      FUNCTION 7 - Look at maze from top.
;
;	The player enters the maze by typing MAZE<cr> to monit or MAZE^k  to
;   DDT,  while at an imlac.   The  screen will be blank  for a minute or two
;   while the imlac side of the maze program is loaded after which the player
;   is placed in to the maze along with any other players.   A letter on  the
;   top of the screen indicates the direction you are currently facing.   The
;   unames of the other players are listed on the sides followed their  score
;   and  the number of times  they were shot.   Anytime a  player is shot the
;   bell will ring and  an "!" will  be placed next  to the shooting  players
;   score  and an "*" will be placed next to the number of times shot counter
;   of the player that was just shot.  Holding down the up or down arrow keys
;   will cause them to repeat.  After a shot is fired the player who is being
;   shot at has  two seconds  to get  out of view  of the  position that  the
;   shooting  player  was  at at  the  time  he fired  the  shot.   All other
;   characters typed are placed in a display buffer at the bottom of all  the
;   imlac's  screen.   Holding the Function-7 (or TAB as the case my be) will
;   allow you to view your position in the maze from the top.
;        The  3 buttons on the mouse and the 5 keyset buttons  may be used as
;   controls and have the following functions, starting from the left of  the
;   mouse;  peek  left,  fire,  peek  right,  turn  around,  turn  left, move
;   forward, turn right, and move backwards.
;        Users may specify their own mazes if they are the first player in  a
;   maze by giving a file name after "maze to use: ".  Just a CR will default
;   to the standard maze.  User mazes must have a specific format if they are
;   to be able to work. They must begin with a LOC 10020 followed by the label
;   MAZE:  on  the first of  32.   octal words which  form a bit  map for the
;   maze.   The maze must  end with  LOC 17713, JMP@  .+1, 101,  and an  END.
;   After assembling the maze must be imtraned by using the "IMTRAN" command.
;   A  muddle function exists for printing out formated source mazes.   It is
;   initiated by  floading "imlac;maze  print"  in  muddle and  then  issuing
;   <PRINT-MAZE  "input file spec" "output file spec">$ where the output file
;   spec defaults to the TTY.   An example of a formated source maze is given
;   below:
;
;
;.INSRT IMSRC;IMDEFS >
;
;	   LOC   10020'
;
; MAZE:	   177777	   ; HERE IS THE 32 WORD MAZE.
;	   106401	   ; NO FOUR SQUARES MAY BE EMPTY.
;	   124675	   ; AND SHARE A COMMON CORNER.
;	   121205	   ; ALL OUTSIDE WALLS MUST BE FILLED IN.
;	   132055	   ; THIS IS THE DEFAULT MAZE.
;	   122741
;	   106415
;	   124161
;	   121405
;	   135775
;	   101005
;	   135365
;	   121205
;	   127261
;	   120205
;	   106765
;	   124405
;	   166575
;	   122005
;	   107735
;	   120001
;	   135575
;	   105005
;	   125365
;	   125225
;	   121265
;	   105005
;	   135375
;	   100201
;	   135675
;	   110041
;	   177777
;
;	   END	101'	; AUTO START BACK INTO CONSOLE PROGRAM


;   Players start in random loctions.

;   The current default maze is:
;
;			      N O R T H
;
;
;	     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
;	     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
;	     $$$	 $$$$$$   $$$   		  $$$
;	     $$$	 $$$$$$   $$$   		  $$$
;	     $$$   $$$   $$$	  $$$$$$   $$$$$$$$$$$$   $$$
;	     $$$   $$$   $$$	  $$$$$$   $$$$$$$$$$$$   $$$
;	     $$$   $$$         $$$   $$$	    $$$   $$$
;	     $$$   $$$         $$$   $$$	    $$$   $$$
;	     $$$   $$$$$$   $$$ 	   $$$   $$$$$$   $$$
;	     $$$   $$$$$$   $$$ 	   $$$   $$$$$$   $$$
;	     $$$   $$$      $$$   $$$$$$$$$$$$  	  $$$
;	     $$$   $$$      $$$   $$$$$$$$$$$$  	  $$$
;	     $$$	 $$$$$$   $$$   	 $$$$$$   $$$
;	     $$$	 $$$$$$   $$$   	 $$$$$$   $$$
;	     $$$   $$$   $$$		$$$$$$$$$	  $$$
;	     $$$   $$$   $$$		$$$$$$$$$	  $$$
;	     $$$   $$$         $$$$$$   	    $$$   $$$
;	     $$$   $$$         $$$$$$   	    $$$   $$$
;	     $$$   $$$$$$$$$   $$$$$$$$$$$$$$$$$$$$$$$$   $$$
;	     $$$   $$$$$$$$$   $$$$$$$$$$$$$$$$$$$$$$$$   $$$
;	     $$$	       $$$		    $$$   $$$
;	     $$$	       $$$		    $$$   $$$
;	     $$$   $$$$$$$$$   $$$   $$$$$$$$$$$$   $$$   $$$
;	     $$$   $$$$$$$$$   $$$   $$$$$$$$$$$$   $$$   $$$
;	     $$$   $$$         $$$   $$$	    $$$   $$$
;	     $$$   $$$         $$$   $$$	    $$$   $$$
; 	W    $$$   $$$   $$$$$$$$$   $$$   $$$$$$	  $$$     E
;	     $$$   $$$   $$$$$$$$$   $$$   $$$$$$	  $$$
;	E    $$$   $$$  	     $$$	    $$$   $$$     A
;	     $$$   $$$  	     $$$	    $$$   $$$
;	S    $$$	 $$$$$$   $$$$$$$$$$$$$$$   $$$   $$$     S
;	     $$$	 $$$$$$   $$$$$$$$$$$$$$$   $$$   $$$
;	T    $$$   $$$   $$$	  $$$   	    $$$   $$$     T
;	     $$$   $$$   $$$	  $$$   	    $$$   $$$
;	     $$$$$$$$$   $$$$$$   $$$   $$$$$$$$$$$$$$$   $$$
;	     $$$$$$$$$   $$$$$$   $$$   $$$$$$$$$$$$$$$   $$$
;	     $$$   $$$      $$$ 		    $$$   $$$
;	     $$$   $$$      $$$ 		    $$$   $$$
;	     $$$	 $$$$$$$$$$$$$$$$$$   $$$$$$$$$   $$$
;	     $$$	 $$$$$$$$$$$$$$$$$$   $$$$$$$$$   $$$
;	     $$$   $$$  				  $$$
;	     $$$   $$$  				  $$$
;	     $$$   $$$$$$$$$   $$$$$$   $$$$$$$$$$$$$$$   $$$
;	     $$$   $$$$$$$$$   $$$$$$   $$$$$$$$$$$$$$$   $$$
;	     $$$	 $$$   $$$		    $$$   $$$
;	     $$$	 $$$   $$$		    $$$   $$$
;	     $$$   $$$   $$$   $$$   $$$$$$$$$$$$   $$$   $$$
;	     $$$   $$$   $$$   $$$   $$$$$$$$$$$$   $$$   $$$
;	     $$$   $$$   $$$   $$$   $$$      $$$   $$$   $$$
;	     $$$   $$$   $$$   $$$   $$$      $$$   $$$   $$$
;	     $$$   $$$         $$$   $$$   $$$$$$   $$$   $$$
;	     $$$   $$$         $$$   $$$   $$$$$$   $$$   $$$
;	     $$$	 $$$   $$$		    $$$   $$$
;	     $$$	 $$$   $$$		    $$$   $$$
;	     $$$   $$$$$$$$$   $$$   $$$$$$$$$$$$$$$$$$   $$$
;	     $$$   $$$$$$$$$   $$$   $$$$$$$$$$$$$$$$$$   $$$
;	     $$$		     $$$		  $$$
;	     $$$		     $$$		  $$$
;	     $$$   $$$$$$$$$   $$$$$$$$$   $$$$$$$$$$$$   $$$
;	     $$$   $$$$$$$$$   $$$$$$$$$   $$$$$$$$$$$$   $$$
;	     $$$      $$$		   $$$  	  $$$
;	     $$$      $$$		   $$$  	  $$$
;	     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
;	     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
;
;
;			       S O U T H

; MAZE PROTOCOL:	MESSAGES ARE SENT TO ALL OTHER IMLACS
;			DO NOT SEND TO ORIGINATING IMLAC
;
; 001 -- PLAYER LEAVES GAME
;  <ID>
;
; 002 -- PLAYER MOVED
;  <ID>
;  <NEW DIRECTION  WITH 100 BIT ON>
;  <NEW XLOC WITH 100 BIT ON>
;  <NEW YLOC WITH 100 BIT ON>
;
; 003 -- PLAYER DIED
;  <ID>
;  <ID OF WHO DIED>
;
; 004 -- ANNOUNCE NEW PLAYER
;  <ID # OF NEW PLAYER>
;  <6 CHARS OF ID NAME>
;  <2 CHAR # OF HITS WITH 100 BIT ON>  (HIGH ORDER 6 BITS THEN LOW ORDER 6 BITS)
;  <2 CHAR # OF DEATHS WITH 100 BIT ON>
;
; 014 -- ERASE DISPLAY RING BUFFER
;
;
; IDS MUST BE >= 1 AND <= 8.
;
; ALL INCOMING MESSAGES ARE CHECKED FOR LEGALITY.  BAD MESSAGES ARE FLUSHED.
; A NUMBER IN THE STATUS LINE INDICATES THE NUMBER OF BAD MESSAGES RECIEVED.
; INFORMATION CONCERNING THE LAST BAD MESSAGE RECIEVED IS SAVED FOR LATER EVALUATION.
;
; ALL CHARACTERS SUBROUTINES AND THE DJMS TABLE IS UP IN THE CONSOLE PROGRAM (SSV).
; THE DJMS TABLE IS ACCESSED THROUGH LOCATION 24 OCTAL WHICH STARTS WITH THE ENTRY
; FOR OCTAL CODE 40 (SPACE).
;
; ANY CHARACTERS TYPED ON CONSOLE (>014') ARE SENT TO PDP-10 AND SHOULD
; BE ECHOED TO ALL! CONSOLES INCLUDING THE ORIGINATOR.
;
; ANY OTHER CHARACTERS RECEIVED BY IMLAC ARE DISPLAYED IN A
; RING BUFFER AT THE BOTTOM OF THE PICTURE.
;
; THE FIRST ANNOUNCE NEW PLAYER MESSAGE THE IMLAC RECIEVES DEFINES ITS ID.
;
; THIS VERSION REQUIRES A GRAPHICS IMLAC WITH LONG VECTOR HARDWARE
; MULTI-LEVEL SUBROUTINING, AND 8K DISPLAY ADDRESSING MOD.
;
; THE MESSAGE SWITCHING PROGRAM ON THE 10 MUST ALSO KEEP TRACK
; OF THE CURRENT SCORES OF ALL THE PLAYERS SO WHEN A NEW PLAYER
; JOINS INTO A ALREADY EXISTING GAME HE MAY RECIEVE THE CURRECT
; SCORES OF ALL THE PLAYERS.
;
; WHEN AN IMLAC WANTS TO JOIN AN EXISTING MAZE THE FOLLOWING OCCURS:
;	1) THE MAZE PROGRAM IS LOADED INTO HIS IMLAC.
;	2) THE CURRENT MAZE IS LOADED ON TOP OF THE DEFAULT MAZE
;	   IF THE DEFAULT MAZE IS NOT BEING USED.
;	3) A TYPE 4 MESSAGE IS SENT TO ALL IMLACS ANOUNCING THE
;	   NEW IMLAC.  THE NEW IMLAC GETS HIS ID FROM THIS MESSAGE.
;	4) TYPE 4 MESSAGES FOR ALL THE OTHER PLAYERS ARE SENT TO
;	   THE NEW IMLAC.
;
;
; WRITTEN BY:
;
; STEVE COLLEY 		CAL TECH	ORIGINAL IDEA OF MAZE, STAND-ALONE MAZE
;					& CRUDE MULTIPLE PLAYERS
; GREG THOMPSON		M.I.T.		FULL MULTIPLE PLAYERS ADDITIONS
; P. D. LEBLING		M.I.T.		PDP-10 MESSAGE SWITCHER AND ROBOTS
; HOWARD PALMER		STANFORD	ORIGINAL IDEA & STAND-ALONE VERSION OF MAZE
;
; further munged by KLH/CBF for fast new protocol.

EXPUNGE MOVE,PTR,EXP	; To keep midas from barfing "RES" at use of these syms in prg.
FAST==1			; to assemble fast-protocol version.
cheat==0		;conditional to assemble cheater stuffs

.mllit==1

	LOC   10000'

RADIX 8.
.ADDR.=1

	JMP   START		; STARTING POINT
	JMP   RESTART		; RESTARTING ENTRY POINT
	JMP   LEAVE		; ENTRY TO RETURN TO SSV (ON ERROR)
	JMP   RETN		; REENTER MAZE MAIN LOOP

	LOC   10020'

MAZE:	177777		; HERE IS THE 32 WORD MAZE
	106401		; NO FOUR SQUARES MAY BE EMPTY
	124675		; AND SHARE A COMMON CORNER
	121205		; ALL OUTSIDE WALLS MUST BE FILLED IN
	132055
	122741
	106415
	124161
	121405
	135775
	101005
	135365
	121205
	127261
	120205
	106765
	124405
	166575
	122005
	107735
	120001
	135575
	105005
	125365
	125225
	121265
	105005
	135375
	100201
	135675
	110041
	177777

;	DSTAT, DX, DY, DIR  IS MY POSITION AND POINT INTO INFO TABLE

DSTAT:	0			; STATUS FLAG
DX:	0  			; X POSITION OF THIS IMLAC
DY:	0  			; Y POSITION OF THIS IMLAC
				; START OUT BIG SO WE WON'T SHOW UP ON MAP
DIR:	0  			; DIRECTION HE IS POINTING
				; BITS 14 AND 15 HAVE MEANING
				; BIT 14   BIT 15
				;   0        0        NORTH
				;   0        1        EAST
				;   1        0        SOUTH
				;   1        1        WEST
DPTR=10'			; INDEX LOC 10 USED AS POINTER
VISPT=11'
VISPT2=12'
VISPT3=13'
VISPT4=14'
VISPT5=15'
		; INDEX LOCATION 16' AND 17' USED BY INTERUPT ROUTINE
NEXTBIT:0  
ETEM:	0  
WPTR:	0  
WPTR2:	0
CNT:	0			; COUNTERS
CNT2:	0  
KILL:	0  			; LAST PLAYER KILLED BY THIS IMLAC
PTR4:	0			; POINTERS
PTR3:	0
PTR2:	0
PTR:	0  
XDELTA:	0  
YDELTA:	0  
BEAMBIT:0  
LASTRIG:0  
LASTLEF:0  
HALLNGTH:0  
MYREAL:	0			; THE REAL ID OF THIS IMLAC
MYBIT:	0     			; THE ID OF THIS IMLAC
mybit1:	0			; MYBIT-1 (normalize to 0-7)
IID:	0			; TEMPORARY IMLAC ID USED FOR SEE ROUTINE
MPTR:	0  
BIT:	0  
KEY:	0  			; LAST KEY READ IN
HOME:	1372'			; CTRL Z  [EXITS PROGRAM]
BACKUP:	204'			; DOWN ARROW  (BACKUP ONE SQUARE)
RTURN:	205'			; RIGHT ARROW  (TURN 90 DEGREES RIGHT)
MOVE:	206'			; UP ARROW  (MOVE FORWARD ONE SQUARE)
LTURN:	210'			; LEFT ARROW  (TURN 90 DEGREES LEFT)
TURNA:	234'			; FUNCTION 4  (TURN 180 DEGREES AROUND)
TEM1:	0			; TEMPORARYS
TEM2:	0
TEM3:	0
PEEKR:	202'			; XMIT  (PEEK TO THE RIGHT)
FIRE:	233'			; ESC  (FIRE)
PEEKL:	216'			; PAGE XMIT  (PEEK TO THE LEFT)
ERING:	214'			; FORM  (ERASE RING BUFFER)
TOPVW:	211'			; TAB  (GET A TOP VIEW OF MAZE)
KEYSET:	0			; LAST VALUE FROM KEYSET
KSCNT:	0			; KEYSET REPEAT COUNTER
TOPSW:	-1			; INDICATES WHETHER A TOP OR INSIDE VIEW
ifn fast,[
relcnt:	0			;counter of rel positions between abs
]
SUBTTL Start of game

;	START OF GAME

START:	IOF			; DISABLE ANY INTERUPTS
	CLA
	DAC   ICNT		; SET NO MESSAGE PENDING
	DAC   MYBIT		; INDICATE WE HAVE NO ID
	MSW			; SET INITIAL KEYSET VALUE
	DAC   KEYSET
	LAC   [7776']		; LIMIT SSV'S DISPLAY LIST
	DAC@  [25']
	JMS   ERASE		; RESET RING BUFFER
	LAC   [MESAGE-1]	; SET UP YOU WERE SHOT MESSAGE
	DAC   11'
	LAC   [YWSB-1]
	DAC   12'
	LWC   17.
	DAC   CNT2
SETUPN:	LAC@  12'
	JMS   GETCHR
	DAC@  11'
	ISZ   CNT2
	JMP   SETUPN

;	NOW WAIT FOR OUR ID

	JMS   CHARIN
	LAC   MYBIT		; WAIT FOR IDENTIFIER MESSAGE TO COME IN
	ASN			; HAS IT BEEN SET YET?
	JMP   .-3		; NO, KEEP WAITING
	STA
	DAC   TOPSW		; DISPLAY TOP VIEW

;	PLACE PLAYER IN MAZE

RESTART:KCF			; RESET KEYBOARD
RESET1:	JMS   RANDOM
	AND   [17']
	DAC@  DX
	JMS   RANDOM
	AND   [37']
	DAC@  DY
	JMS   PNTBIT
	LAC@  MPTR
	AND   BIT
	ASZ
	JMP   RESET1
	JMS   RANDOM
	AND   [3]
	DAC@  DIR
	LAC   [AD1]		; RESET TO MAIN SCREEN
	DAC   WHICHD
ifn fast,[
	cla
	dac   relcnt		; force abs. position out first thing.
]
	JMP   RETN4

RETN2:	CLA			; LOOK FROM INSIDE MAZE
	DAC   TOPSW
;
;	SEND NEW POSITION TO 10
;
RETN4:	STA			; SET TO PLAYING STATUS
	DAC@  DSTAT
	JMS   PRINT		; BUILD CURRENT DISPLAY
ife fast,[
	jms  absmsg		; send out absolute position
	jmp   retn
]
ifn  fast,[
	lac   relcnt
	asm			; if GE 0, something wants an abs pos sent out.
	jms  absmsg		; sigh, send absolute
	jmp   retn		; and continue


relmsg:	0
	ior mybit1
	jms send1
	isz relcnt
	nop
	jmp@ relmsg

] ;end of ifn fast

; Send new absolute position
absmsg:	0
ifn fast,[
	lwc   20		;number of rel messages before an abs
	dac   relcnt		;set counter
]
	LAW   2			; SEND MOVED MESSAGE CODE
	JMS   SEND1
	LAC   MYBIT		; SEND MY ID
	JMS   SEND1
	LAC@  DIR		; SEND NEW DIRECTION
	AND   [3]		; SEND ONLY LOWER 2 BITS!
	IOR   [100']
	JMS   SEND1
	LAC@  DX		; SEND NEW X LOCATION
	IOR   [100']
	JMS   SEND1
	LAC@  DY		; SEND NEW Y LOCATION
	IOR   [100']
	JMS   SEND1
	jmp@  absmsg		;return
SUBTTL Main Loop
;	MAIN LOOP

RETN:	JMS   CHARIN		; GET STUFF FROM TEN
	JMS   DISP		; MAINTAIN DISPLAY
RETN3:	KSF			; NO, IS THERE A KEY DOWN?
	JMP   KSCHK		; NO, NOW CHECK KEYSET
	CAL			; YES, READ THE KEY
	KRC
	DAC   KEY
	LWC   8.		; SET UP TO REPT KEY (TIME BEFORE START REPEATING)
	DAC   REPTCNT
REPT:	LAC   KEY
KEYREPT:SAM   HOME		; IS IT CTRL-Z?
	JMP   KEYCHK
	LAC   MYBIT		; REMOVE ME FROM MAZE
	DAC   ININFO
	JMP   GONER

;	CHECK KEYSET

KSCHK:	CLA
	MSW
	SAM   KEYSET		; HAS IT CHANGED?
	JMP   .+2		; YES, SO DO SOMETHING ABOUT IT
	JMP   RETN		; NO, RE-ENTER MAIN LOOP
	DAC   KEYSET		; SAVE NEW VALUE
	LWC   15.		; SET UP TO REPEAT
	DAC   KSCNT
KSREPT:	LAC   [BACKUP]		; NOW FIGURE WHICH KEY TO SIMULATE
	DAC   PTR
	LAC   KEYSET
	IOR   [174340']		; TURN ON BITS TO IGNORE
	CMA\CLL
	ASN
	JMP   RETN
	RAR   1
	LSZ
	JMP   GOTIT
	XAM   PTR
	IAC
	XAM   PTR
	JMP   .-6
GOTIT:	LAC@  PTR		; GET APPROPRIATE KEY
	DAC   KEY
	JMP   KEYREPT

;	SEE IF WE ARE BLOWING UP

KEYCHK:	LAC   BIGEXP		; IF SO THEN IGNORE KEYS
	ASZ
	JMP   RETN		; YES, SO WAIT IT OUT

;	CHECK FOR VARIOUS KEYBOARD COMMANDS

KEY1:	LAC   KEY
	SAM   RTURN		; TURN RIGHT?
	JMP   KEY2
	ISZ@  DIR
	NOP
ifn fast,[
	lac   [20']		; new protocol for right turn
	jms   relmsg
]
	JMP   RETN2
KEY2:	SAM   LTURN		; LEFT TURN?
	JMP   KEY3
	LAC@  DIR
	SUB   [1]
	DAC@  DIR
ifn fast,[
	lac   [30']		; new protocol for left turn
	jms   relmsg
]
	JMP   RETN2
KEY3:	SAM   MOVE		; MOVE FORWARD?
	JMP   KEY4
	JMS   MOVER
	JMP   RETN
ifn fast,[
	lac   [150']		; new protocol for move forward
	jms   relmsg
]
	JMP   RETN2
KEY4:	SAM   PEEKL		; PEEK LEFT?
	JMP   KEY5
	JMS   MOVER
	JMP   RETN
	LAC@  DIR
	SUB   [1]
	DAC@  DIR
	JMS   HOLD
	LAC@  DIR
	SUB   [1]
	DAC@  DIR
PEEKER:	JMS   MOVER
	JMP   RETN
	JMS   ADIR2
	JMP   RETN2
KEY5:	SAM   PEEKR		; PEEK RIGHT?
	JMP   KEY6
	JMS   MOVER
	JMP   RETN
	ISZ@  DIR
	NOP
	JMS   HOLD
	ISZ@  DIR
	NOP
	JMP   PEEKER
KEY6:	SAM   TURNA		; TURN AROUND?
	JMP   KEY7
	JMS   ADIR2
ifn fast,[
	lac   [140']		; new protocol for turn-around
	jms   relmsg
]
	JMP   RETN2
KEY7:	SAM   BACKUP		; BACK UP?
	JMP   KEY8
	JMS   ADIR2
	JMS   MOVER
	JMP   key7np
	JMS   ADIR2
ifn fast,[
	lac   [160']		; new protocol for move backwards.
	jms relmsg
]
	JMP   RETN2
key7np:	JMS   ADIR2		; Can't move backwards, restore direction.
	JMP   RETN

ADIR2:	0
	LAC@  DIR
	ADD   [2]
	DAC@  DIR
	JMP@  ADIR2

KEY8:	SAM   FIRE		; FIRE?
	JMP   KEY9

;	LOOK FOR VISIBLE OPPONENT TO SHOOT AT

	LAC   [THING+4]		; SET DISPLAY LIST POINTER
	DAC   PTR
	LWC   8.		; 8 POSSIBLE IMLACS
	DAC   CNT2
	LAC   [IM1+4]		; SET INFO TABLE POINTER
	DAC   VISPT
	IAC
	DAC   PTR2
CHKNEXT:LAC@  PTR		; GET DISPLAY BODY
	SAM   [DNOP]		; IS HE VISIBLE?
	JMP   NOTDNOP
NOTHIM:	LAC   VISPT		; NO, BUMP POINTERS TO NEXT PLAYER
	ADD   [11.]
BUMPTRS:DAC   VISPT
	IAC
	DAC   PTR2
	LAC   PTR
	ADD   [6]
	DAC   PTR
	ISZ   CNT2		; DID WE CHECK THEM ALL
	JMP   CHKNEXT		; NO
	JMP   RETN		; YES, RETURN
NOTDNOP:SAM   JMSEXP		; COULD HE ALREADY BE EXPLODING?
	JMP   FOUNONE		; NO, SO WE FOUND A OPPONENT TO SHOOT AT
	JMP   NOTHIM		; YES, SO DON'T FIRE AT HIM
FOUNONE:LAC@  PTR2		; ARE WE ALREADY FIRING ON THIS GUY?
	ASZ			; IF SO THEN DON'T FIRE AGAIN
	JMP   NOTHIM
	LWC   80.		; SET 2 SECOND DELAY TO ALLOW PLAYER TO DODGE IT
	DAC@  VISPT
	LAC@  DIR
	DAC@  VISPT
	LAC@  DX		; SAVE OUR LOCATION
	DAC@  VISPT
	LAC@  DY
	DAC@  VISPT
	LAC   VISPT		; NOW CHECK NEXT PLAYER
	ADD   [7]
	JMP   BUMPTRS
;
;	DOES HE WANT SCREEN ERASED?
;
KEY9:	SAM   ERING
	JMP   VIEWTOP		; NO
	JMS   ERASE		; YES, SO ERASE IT
	JMP   RETN		; THEN RETURN TO MAIN LOOP
;
;
;	LOOK AT MAZE FROM TOP
;
VIEWTOP:SAM   TOPVW		; LOOK AT MAZE FROM TOP?
ife cheat,	jmp sendit
ifn cheat,	JMP   CHNGP
	STA			; YES, SET FLAG FOR TOP VIEW
	DAC   TOPSW
	JMS   PRINT		; AND BUILD DISPLAY
VTWAIT:	JMS   CHARIN
	JMS   DISP
	CAL
	KRB
	SAM   TOPVW		; DISPLAY TOP VIEW AS LONG 
	JMP   .+2		; AS KEY IS HELD DOWN
	JMP   VTWAIT
	CLA			; LOOK INSIDE AGAIN
	DAC   TOPSW
	JMS   PRINT
	JMP   RETN

ifn cheat,[
;
;	SECRET ID SWITCHING KEYS
;
;	CTRL-REPT 0 TO :
;	0	RETURN TO ORIGINAL ID
;	N	CHANGES TO ID N
;	:	COMPLEMENT FORWARD SQUARE
;
CHNGP:	SUB   [3260']
	ASP
	JMP   SENDIT
	SAM   [10.]		; CTRL-REPT : ?
	JMP   .+2		; NO
	JMP   ZAP		; YES
	ASN			; CTRL-REPEAT 0?
	LAC   MYREAL		; IF SO GET MY REAL ID
	SUB   [9.]
	ASM
	JMP   RETN
	ADD   [9.]
	DAC   TEM1
	SAL   3
	ADD   [IML1-8.]		; SEE IF THIS PLAYER IS PLAYING
	DAC   TEM2		; BY SEEING IF HIS NAME EXISTS
	LAC   [DJMS D040,]
	SAM@  TEM2
	JMP   .+2
	JMP   RETN
	LAC   TEM1
	JMS   GETD		; CHANGE US TO NEW ID
	JMS   PRINT		; DISPLAY NEW VIEW
	JMP   RETN
ZAP:	JMS   MOV		; SET UP PTRS TO NEXT SQUARE
	LAC@  MPTR		; NOW FLIP BIT
	XOR   BIT
	DAC@  MPTR
	JMS   PRINT		; REBUILD DISPLAY
	JMP   RETN
] ;end of ifn cheat.

;	SEND OTHER CHARACTERS TO 10
;
SENDIT:
ifn cheat,	ADD   [3260']
	AND   [177']
	SAM   [15']		; CR?
	JMP   .+2
	JMP   SENDOK
	SUB   [40']		; CONTROL CODE?
	ASP
	JMP   RETN		; YES, SO IGNORE IT
	sub [100']		;it's a 40-177 char, see if it's 140-177
	asp
	add [40']		;no, it's 40-137, get char back.
	add [100']		;yes, 140-177.  make it uppercase.
	
SENDOK:	JMS   SEND1		; NOW SEND IT TO 10. char is either 40-137 or 15.
	JMP   RETN
;
;	HOLD A POSITION FOR AS LONG AS THE SAME KEY IS HELD DOWN
;
HOLD:	0  
	JMS   PRINT		; UPDATE DISPLAY
HOLD1:	JMS   CHARIN		; GET STUFF FROM TEN
	JMS   DISP		; MAINTAIN DISPLAY
	CAL
	KRB
	SAM   KEY		; IS THE SAME KEY DOWN?
	JMP   TSTKS		; NO, TEST KEY SET FOR KEY STILL DOWN
	JMP   HOLD1		; YES, HOLD THIS LOCATION
TSTKS:	CLA
	MSW
	ASN			; DO WE HAVE THE HARDWARE?
	JMP@  HOLD		; NO, JUST RETURN
	AND   [2400']		; IF EITHER PEEK LEFT OR RIGHT STILL
	XOR   [2400']
	ASZ			; DOWN THEN HOLD POSITION
	JMP   HOLD1
	JMP@  HOLD		; RETURN
;
;	POINT MPTR TO APPROPRIATE WORD MAZE (Y)
;	AND BIT TO APPROPRIATE BIT IN WORD FOR OUR
;	CURRENT LOCATION
;
PNTBIT:	0  
	LAC   [MAZE]
	ADD@  DY
	DAC   MPTR
	LAC@  DX
	ASZ
	JMP   PNT1
	LAC   [100000']
	JMP   PNT2
PNT1:	CIA
	DAC   CNT
	CLL
	LAC   [100000']
	RAR   1
	ISZ   CNT
	JMP   .-2
PNT2:	DAC   BIT
	JMP@  PNTBIT
;
;	MOVE FORWARD ONE SQUARE
;
MOV:	0  
	CLA			; CLEAR OUT INCREMENTS
	DAC   TEM1		; Y INCREMENT
	DAC   TEM2		; X INCREMENT
	JMS   PNTBIT		; POSITION TO CURRENT POSITION
	LAC@  DIR		; SEE WHICH DIRECTION WE ARE HEADING
	AND   [1]
	ASZ
	JMP   MOVEWE
	JMS   CREMENT		; MOVE NORTH OR SOUTH
	DAC   TEM1
	ADD   MPTR
	DAC   MPTR
	JMP@  MOV		; RETURN
MOVEWE:	JMS   CREMENT		; MOVE WEST OR EAST
	AND   [20']
	IOR   [RAL 1]
	DAC   NOPER
	LAC   BIT
	CLL
NOPER:	NOP
	DAC   BIT
	JMS   CREMENT
	CIA
	DAC   TEM2		; SET X INCREMENT
	JMP@  MOV
MOVER:	0
	JMS   MOV		; MOVE FORWARDS ONE SQUARE 
	LAC@  MPTR		; SEE IF IT IS A WALL
	AND   BIT
	ASZ
	JMP@  MOVER		; A OPEN SQUARE
	LAC   TEM2		; UPDATE X TO THIS SQUARE
	ADD@  DX
	DAC@  DX
	LAC   TEM1		; UPDATE Y
	ADD@  DY
	DAC@  DY
	ISZ   MOVER		; AND INDICATE WE MOVED BY SKIPPING
	JMP@  MOVER
;
;	RETURN 1 OR -1 ACCORDING TO WHICH DIRECTION WE ARE HEADING
;
CREMENT:	0  
	LAC@  DIR
	SAR   1
	AND   [1]
	ASN
	LAC   [-1]
	JMP@  CREMENT

;	REFRESHING ROUTINE

REFR:	0  
	DSF
	SSF
	JMP@  REFR
	SCF
	LAC   WHICHD		; GET APPROPRIATE DISPLAY LIST ADDRESS
	DLA
	DON
	STA			; INDICATE 40 CYCLE SYNC
	DAC   SYNC
	JMP@  REFR
WHICHD:	AD1			; CONTAINS ADDRESS OF CURRENT DISPLAY
SYNC:	0			; 40 CYCLE SYNC FLAG
BIGEXP:	0			; OUR EXPLOSION COUNTER
JMSEXP:	DJMS  EXPLOSIN
EXP:	DDSP
	DDSP
	DDSP
INC1:	DDSP
INC2:	DDSP
INC3:	DDSP
	DRJM
EXPLOSIN:DLXA  1000
	DJMS  WAIT
	DSTS  3
	INC E,D03
	INC D03,100'
	DJMS  EXP
	INC E,D00
INC4:	INC D00,D00
	INC 100',100'
	DJMS  EXP
	INC E,D00
INC5:	INC D00,D00
INC6:	INC D00,D00
	INC 100',100'
	DJMP  EXP

;	KEEP DISPLAY AND TIMED OCCURANCES RUNNING
;
DISP:	0
	JMS   REFR		; KEEP UP DISPLAY
	LAC   SYNC		; HAS THE 40 CYCLE SYNC OCCURED YET?
	ASM
	JMP@  DISP		; NO, JUST RETURN
	CLA			; YES, RESET IT
	DAC   SYNC
;
;	CHECK FOR OUR BLOWING UP
;
	LAC   BIGEXP		; ARE WE BLOWING UP?
	ASN
	JMP   CHKOPP		; NO
	ISZ   BIGEXP		; IS IT FINSHED?
	JMP   UPDTBIG		; NO, UPDATE IT
	JMP   RESTART		; YES, NOW RESTART THE IMLAC
;
;	UPDATE 4 POINTERS
;
BUMPPTS:0
	LAC   VISPT2
	ADD   [5]
	DAC   VISPT2
	LAC   VISPT3
	ADD   [5]
	DAC   VISPT3
	LAC   VISPT4
	ADD   [5]
	DAC   VISPT4
	LAC   VISPT5
	ADD   [5]
	DAC   VISPT5
	JMP@  BUMPPTS
;
;	UPDATE A DLXA OR DLYA
;
UPDTSUB:0
	LAC@  VISPT2		; GET OLD DLXA OR DLYA
	ADD@  VISPT		; ADD IN INCREMENT
	AND   [1777']		; MASK TO POSITION BITS
	DAC   TEM2		; SAVE NEW POSITION
	LAC@  VISPT3		; GET OLD DLXA OR DLYA AGAIN
	AND   [30000']		; GET DLXA OR DLYA OPCODE BIT
	IOR   TEM2		; OR IN POSITION
	DAC@  VISPT4		; STORE IT BACK ON TOP OF OLD DLXA OR DLYA
	JMP@  UPDTSUB		; RETURN

;	UPDATE OUR EXPLOSION ROUTINE
;
UPDTBIG:LWC   8.		; EIGHT PIECES TO UPDATE
	DAC   CNT		; SET COUNTER
	LAC   [BIGX1INC-1]	; SET POINTER TO UPDATE LIST
	DAC   VISPT
	LAC   [BIGX1-1]		; SET POINTERS TO DISPLAY LIST
	DAC   VISPT2
	DAC   VISPT3
	DAC   VISPT4
UPDTLOOP:JMS   UPDTSUB		; UPDATE X
	JMS   UPDTSUB		; UPDATE Y
	JMS   BUMPPTS		; UPDATE POINTERS
	ISZ   CNT		; HAVE I DONE ALL 8 BITS?
	JMP   UPDTLOOP		; NO, DO NEXT ONE
;				YES, FALL THROUGH
;	OPPONENTS EXPLOSION ROUTINE
;
CHKOPP:	LAC   [THING-2]		; CHECK EXPLOSION TIMERS
	DAC   PTR
	LAC   [IM1-2]
	DAC   PTR2
	LWC   9.
	DAC   CNT2
OPPBUMP:LAC   PTR
	ADD   [6.]
	DAC   PTR
	LAC   PTR2
	ADD   [11.]
	DAC   PTR2
	SUB   [9.]
	DAC   PTR3
	ISZ   CNT2
	JMP   OPPLOOP
	JMP   UPDATE
OPPLOOP:LAC@  PTR2		; SEE IF THERE IS AN EXPLOSION ON THIS PLAYER
	ASN
	JMP   OPPBUMP
	ISZ@  PTR2		; YES, BUT HAS IT RUN OUT?
	JMP   OPPBUMP
	CLA
	DAC@  PTR3		; YES, SO INDICATE PLAYER UNACTIVE
	LAC   [DNOP]
	DAC@  PTR		; TURN HIS EXPLOSION OFF
	JMP   OPPBUMP
;
;	KEEP UPDATEING RANDOM EXPLOSION
;
UPDATE:	JMS   RANDOM		; UPDATE EXPLOSION (GET RANDOM NUMBER)
	AND   [77']
	DAC   TEM1
	IOR   [INC E,B00]
	DAC   INC1
	AND   [77']
	SAL   3
	SAL   3
	SAL   2
	DAC   TEM2
	ADD   TEM1
	XOR   [INC 344,344]
	DAC   INC2
	LAC   TEM2
	IOR   [INC B00,100']
	DAC   INC3
	JMS   RANDOM
	AND   [77']
	DAC   TEM1
	SAL   3
	SAL   3
	SAL   2
	IOR   TEM1
	IOR   [140300']
	DAC   INC4
	XOR   [22044']
	DAC   INC5
	DAC   INC6

;	CHECK FOR BULLET FIRED AND IF IT HITS ITS MARK
;
CHKBULL:LAC   [THING+3]
	DAC   PTR2
	IAC
	DAC   PTR3
	LAC   [IM1+5]
	DAC   PTR
	SUB   [5]
	DAC   SEEPT
	LWC   8.		; 8 IMLACS TO CHECK
	DAC   CNT2
DISP1:	LAC@  PTR
	ASZ
	JMP   DISP2
DISPNO:	LAW   11.
	ADD   PTR
	DAC   PTR
	SUB   [5]
	DAC   SEEPT
	LAW   6
	ADD   PTR2
	DAC   PTR2
	IAC
	DAC   PTR3
	ISZ   CNT2
	JMP   DISP1
;
;	NOW CHECK FOR REPTING KEYS
;
	LAC   REPTCNT		; REPT ON?
	ASN
	JMP   CHKKS		; NO, BUT CHECK FOR KEYSET REPEAT
	ISZ   REPTCNT
	JMP   CHKKS
	CLA
	KRB
	SAM   KEY
	JMP   CHKKS
	SAM   MOVE		; ONLY REPEAT :  MOVE FORWARDS?
	JMP   .+2
	JMP   .+3
	SAM   BACKUP		; MOVE BACKWARDS?
	JMP   CHKKS
	LWC   3.
	DAC   REPTCNT
	JMP   REPT		; DO KEY AGAIN
REPTCNT:0
CHKKS:	LAC   KSCNT		; KEYSET REPT ON?
	ASN
	JMP@  DISP		; NO, SO RETURN
	ISZ   KSCNT
	JMP@  DISP
	CLA
	MSW
	SAM   KEYSET		; IS IT THE SAME??
	JMP@  DISP
	SAM   [3433']		; MOVE FORWARDS?
	JMP   .+2
	JMP   .+3
	SAM   [3436']		; MOVE BACKWARDS?
	JMP@  DISP
	LWC   3.
	DAC   KSCNT
	JMP   KSREPT
;
;	IF THERE IS STILL A PLAYER VISIBLE THEN KILL IT
;
DISP2:	ISZ@  PTR		; IS IT TOTALLY FIRED YET?
	JMP   DISPNO
	LAC@  SEEPT		; IS HE STILL ALIVE
	ASM
	JMP   DISPNO
	ISZ   PTR
	LAC@  PTR		; GET OUR OLD DIRECTION
	AND   [3]
	DAC@  [SAVEDIR]
	ISZ   PTR
	LAC@  PTR		; GET OUR OLD X
	DAC@  [SAVEDX]
	ISZ   PTR
	LAC@  PTR		; GET OUR OLD Y
	DAC@  [SAVEDY]
	LAC   PTR		; RESET POINTER
	SUB   [3]
	DAC   PTR
	SUB   [5]
	DAC   PTR4		; SET UP POINTER FOR SEE ROUTINE
	LAW   9.
	ADD   CNT2
	DAC   KILL
	DAC   IID
	JMS@  [SEE]		; SEE IF PLAYER HASN'T MOVED OUT OF THE WAY
	JMP   DISPNO		; HE MADE IT IN TIME
	COA			; NO, SO SHOOT HIM DOWN
	DAC@  PTR4		; INDICATE THAT HE IS NOW DYING
	LAW   3			; SEND PLAYER KILLED MESSAGE
	JMS   SEND1
	LAC   MYBIT		; SEND MY ID
	JMS   SEND1
	LAC   KILL		; SEND ID OF PLAYER KILLED
	JMS   SEND1
	LAC   [DNOP]
	DAC@  PTR2		; TURN OFF EYES
	LAC   JMSEXP		; PUT IN EXPLOSION IN PLACE OF ID
	DAC@  PTR3
	LAC   PTR4		; POINT TO EXPLOSION COUNT
	ADD   [9.]
	DAC   PTR4
	LWC   60.		; SET EXPLOSION TO LAST 1 1/2 SEC.
	DAC@  PTR4
	LAC   MYBIT		; BUMP OUR SCORE
	JMS   UPSCORE
	JMP   DISPNO

;	SEND A WORD TO THE 10
;
SEND1:	0
	DAC   TEM1		; SAVE CHARACTER
	JMS   REFR		; KEEP DISPLAY UP
	TSF			; WAIT FOR OUTPUT FLAG
	JMP   .-2		; NOT READY YET
	LAC   TEM1		; GET CHARACTER BACK
	TPC			; TRANSMIT CHARACTER
	LAC   TEM1
	JMP@  SEND1		; RETURN
;
;	RANDOM NUMBER GENERATOR
;
RANDOM:	0
	lac rnd
	add mybit
	ral 2
	dac rnd
	xor@ rnd
	dac rnd
	jmp@ random
RND:	0


;	UPDATE SCORE IN INFO TABLES AND IN DISPLAY LIST
;	ENTER WITH ID IN AC

UPSCORE:0
	DAC   SAVEID		; SAVE ID
	LWC   8.		; NOW TURN ALL ! AND  * OFF
	DAC   UPCNT
	LAC   [SCORE+3]
	DAC   PTSCORE
CLRALL:	LAC   [DNOP]
	DAC@  PTSCORE
	LAW   5
	ADD   PTSCORE
	DAC   PTSCORE
	LAC   [DNOP]
	DAC@  PTSCORE
	LAW   9.
	ADD   PTSCORE
	DAC   PTSCORE
	ISZ   UPCNT
	JMP   CLRALL
	LAC   SAVEID		; NOW BUMP SHOOTING PLAYERS SCORE
	JMS   POSITION		; POSITION US TO CORRECT TABLE
	LAC   ITEMP1		; BUMP POINTER TO COUNT
	ADD   [4]
	DAC   ITEMP1
	ISZ@  ITEMP1		; BUMP SCORE BY ONE
	NOP
	LAC   SAVEID		; POINT TO SHOOTING PLAYERS SCORE IN DISPLAY
	JMS   POINTSC
	JMS   SCOREIT
	LAW   41'		; INSERT EXCLAMATION MARK
	JMS   GETCHR
	DAC@  PTSCORE
	LAC   KILL		; NOW DO SHOT PLAYER SHOT COUNT
	JMS   POSITION
	ADD   [10.]
	DAC   ITEMP1
	ISZ@  ITEMP1		; BUMP IT ALSO
	NOP
	LAC   KILL		; NEXT UPDATE THE SHOT COUNT IN DISPLAY
	JMS   POINTSC
	ADD   [5]
	DAC   PTSCORE
	JMS   SCOREIT
	LAW   52'		; INSERT ASTERIC
	JMS   GETCHR
	DAC@  PTSCORE
	BEL			; RING BELL INDICATING PLAYER SHOT
	JMP@  UPSCORE		; RETURN
POINTSC:0
	CIA
	DAC   UPCNT
	LAC   [SCORE-14.]		; POINT TO DISPLAY LIST TO UPDATE SCORE
	ADD   [14.]
	ISZ   UPCNT
	JMP   .-2
	DAC   PTSCORE
	JMP@  POINTSC
;
;	SCORE GENERATOR SUBROUTINE
;	ENTER WITH  ITEMP1 -> SCORE TO BE CONVERTED
;		   PTSCORE -> 3 WORDS WHERE DJMSES ARE TO BE PLACED
;	LEAVE WITH PTSCORE -> WORD 4 (ONE PAST THE 3 DJMSES)
;
SCOREIT:0
	CLA
	DAC   HUNDR
	DAC   TENS
	DAC   ONES
	LAC@  ITEMP1		; GET CURRENT SCORE
	SUB   [1000.]		; MAKE IT MOD 1000
	ASM
	JMP   .-2
	ADD   [1000.]
	DAC@  ITEMP1		; STORE IT BACK FOR POSTERITY
	SUB   [100.]
	ASP
	JMP   DOTENS
	ISZ   HUNDR
	JMP   .-4
DOTENS:	ADD   [100.]
	SUB   [10.]
	ASP
	JMP   DOONES
	ISZ   TENS
	JMP   .-4
DOONES:	ADD   [10.]
	DAC   ONES
	LAC   HUNDR
	ASN
	JMP   ZROSUP
	JMS   DODIGIT
	LAC   TENS
DTENS:	JMS   DODIGIT
	LAC   ONES
	JMS   DODIGIT
	JMP@  SCOREIT
ZROSUP:	LWC   20'
	JMS   DODIGIT
	LAC   TENS
	ASN
	LWC   20'
	JMP   DTENS
DODIGIT:0
	ADD   [60'-40']
	ADD@  [24']
	DAC   UPCNT
	LAC@  UPCNT
DACIT:	DAC@  PTSCORE
	ISZ   PTSCORE
	JMP@  DODIGIT
SAVEID:	0
PTSCORE:0
UPCNT:	0
ONES:	0
TENS:	0
HUNDR:	0

;	BUILD A LONG VECTOR INSTRUCTION
;
LV:	0  
	LAC   XDELTA
	AND   [40000']
	DAC   TEM3
	LAC   XDELTA
	ASP
	CIA
	DAC   XDELTA
	LAC   YDELTA
	AND   [20000']
	IOR   TEM3
	DAC   TEM3
	LAC   YDELTA
	ASP
	CIA
	DAC   YDELTA
	SUB   XDELTA
	ASM
	JMP   LV1
	AND   [7777']
	IOR   [40000']
	DAC@  DPTR
	LAC   XDELTA
	IOR   BEAMBIT
	DAC@  DPTR
	LAC   YDELTA
	JMP   LV2
LV1:	CIA
	AND   [7777']
	IOR   [40000']
	DAC@  DPTR
	LAC   YDELTA
	IOR   BEAMBIT
	DAC@  DPTR
	LAC   XDELTA
	IOR   [10000']
LV2:	IOR   TEM3
	DAC@  DPTR
	JMP@  LV

;	GENERATE NEW DISPLAY
;	SEND I MOVED MESSAGE TO 10
;	SET UP POSSIBLE VISIBLE OPPONENTS

PRINT:	0  
	LAC@  DSTAT		; CHECK STATUS OF PLAYER
	ASZ			; IS HE NOT PLAYING?
	JMP   INGAME		; NO
	LAW   116'		; YES, DISPLAY A "N" THEN
	JMP   SETST
HEACT:	LAC   [DJMS D040,]	; IF HE IS ACTIVE THEN DON'T DISPLAY ANYTHING
	JMP   SETST2
INGAME:	ASP			; IS HE DYING?
	JMP   HEACT		; NO, THEN HE IS ACTIVE!
	LAW   104'		; YES, THEN DISPLAY A "D" FOR DEAD
SETST:	JMS   GETCHR		; GET THE CHARACTER
SETST2:	DAC@  [DEAD]		; PUT IT IN DISPLAY
	LAC@  DIR		; FIRST DO DIRECTION LETTER
	AND   [3]
	ADD   [DIRLET]
	DAC   TEM1
	LAC@  TEM1
	JMS   GETCHR
	DAC@  [LETTER]
	LAC   TOPSW		; SEE IF TOP OR INSIDE VIEW
	ASN
	JMP   INSIDE
TOPV:	LAC   [DLIST-1]		;WRITE OVER MAZE DISPLAY LIST
	DAC   DPTR
	LAC   [DLYA 1600',]
	DAC@  DPTR
	LAC   [DJMS DNL3,]
	DAC@  DPTR
	LWC   32.
	DAC   CNT
	LAC   [MAZE-1]
	DAC   PTR
	LAC@  DY
	SAL   3
	SAL   1
	ADD@  DX
	IAC
	CIA
	DAC   PTR4
NXTW:	LWC   16.
	DAC   CNT2
	LAC   [100000']
	DAC   BIT
	ISZ   PTR
NXTB:	ISZ   PTR4		; HAVE WE REACHED OUR LOCATION?
	JMP   .+2
	JMP   ME
	LAC@  PTR		; SEE IS SQUARE OPEN OR CLOSED
	AND   BIT
	ASZ
	JMP   ON
	LAC   [DJMS SPMAZE,]
	JMP   ON+1
ME:	LAC@  DIR		; FIGURE OUT WHICH ARROW TO USE
	AND   [3]
	ADD   [ARROWS]
	DAC   PTR3
	LAC@  PTR3
	JMP   ON+1
ON:	LAC   [DJMS CHARMZE,]
	DAC@  DPTR
	CLL
	LAC   BIT
	RAR   1
	DAC   BIT
	ISZ   CNT2		; THIS LINE DONE?
	JMP   NXTB
	LAC   [DJMS DNL3,]
	DAC@  DPTR
	ISZ   CNT
	JMP   NXTW		; THIS ROW DONE?
	CLA			; DHLT AT END
	DAC@  DPTR
	JMP@  PRINT
INSIDE:	JMS   PNTBIT
	LAC   [WALLS]
	DAC   WPTR
	IAC
	DAC   WPTR2
	CLA
	DAC   CNT
	LAC   [DLIST-1]
	DAC   DPTR
	LAC   [20000']
	DAC   BEAMBIT
	DSN
	JMP   .-1
	LAC@  DIR
	AND   [1]
	ASZ
	JMP   EW
	JMS   CREMENT
	DAC   TEM1
	CIA
	AND   [20']
	IOR   [RAL 1]
	DAC   NOP2
	XOR   [20']
	DAC   NOP3
PRNT1:	LAC   MPTR
	ADD   TEM1
	DAC   NEXTBIT
	LAC@  NEXTBIT
	AND   BIT
	DAC   NEXTBIT
	LAC   BIT
	CLL
NOP2:	NOP
	AND@  MPTR
	JMS   LBIT
	LAC   BIT
	CLL
NOP3:	NOP
	AND@  MPTR
	JMS   RBIT
	LAC   MPTR
	ADD   TEM1
	DAC   MPTR
	LAC   NEXTBIT
	JMS   ENDCHECK
	LAC   CNT
	SAM   [31.]		; SPECIAL CHECK
	JMP   .+2
	JMP   CLOSEOUT
	ISZ   WPTR
	ISZ   WPTR2
	ISZ   CNT
	JMP   PRNT1
EW:	JMS   CREMENT
	DAC   TEM1
	AND   [20']
	IOR   [RAL 1]
	DAC   NOP4
	DAC   NOP5
PRNT2:	LAC   BIT
	CLL
NOP5:	NOP
	AND@  MPTR
	DAC   NEXTBIT
	LAC   MPTR
	ADD   TEM1
	DAC   TEM2
	LAC   BIT
	AND@  TEM2
	JMS   LBIT
	LAC   MPTR
	SUB   TEM1
	DAC   TEM2
	LAC   BIT
	AND@  TEM2
	JMS   RBIT
	LAC   BIT
	CLL
NOP4:	NOP
	DAC   BIT
	LAC   NEXTBIT
	JMS   ENDCHECK
	ISZ   WPTR
	ISZ   WPTR2
	ISZ   CNT
	JMP   PRNT2
LBIT:	0  
	DAC   LASTLEF
	ASZ
	JMP   LB1
	LAC@  WPTR       ; HALLWAY
	CIA
	ADD   WALLS
	IOR   [10000']
	DAC@  DPTR
	LAC@  WPTR
	ADD   WALLS
	IOR   [20000']
	DAC@  DPTR
	LAC   [DJMS WAIT,]
	DAC@  DPTR
	LAC   CNT
	ASN
	JMP   LB2
	CAL
	DAC   XDELTA
	LAC@  WPTR
	SAL   1
	CIA
	DAC   YDELTA
	JMS   LV
LB2:	LAC@  WPTR2
	CIA
	ADD   WALLS
	IOR   [20000']
	DAC@  DPTR
	LAC   [DJMS WAIT,]
	DAC@  DPTR
	CAL
	DAC   YDELTA
	LAC@  WPTR
	SUB@  WPTR2
	DAC   XDELTA
	JMS   LV
	JMS   FIX
	CAL
	DAC   XDELTA
	LAC@  WPTR2
	SAL   1
	DAC   YDELTA
	JMS   LV
	LAC   [20000']
	DAC   BEAMBIT
	CAL
	DAC   YDELTA
	LAC@  WPTR2
	SUB@  WPTR
	DAC   XDELTA
	JMS   LV
	JMP@  LBIT
LB1:	LAC@  WPTR2      ; WALL
	CIA
	ADD   WALLS
	IOR   [10000']
	DAC@  DPTR
	LAC@  WPTR2
	ADD   WALLS
	IOR   [20000']
	DAC@  DPTR
	LAC   [DJMS WAIT,]
	DAC@  DPTR
	LAC@  WPTR
	SUB@  WPTR2
	DAC   YDELTA
	CIA
	DAC   XDELTA
	JMS   LV
	LAC@  WPTR
	CIA
	ADD   WALLS
	IOR   [10000']
	DAC@  DPTR
	XOR   [30000']
	DAC@  DPTR
	LAC   [DJMS WAIT,]
	DAC@  DPTR
	LAC@  WPTR
	SUB@  WPTR2
	DAC   XDELTA
	DAC   YDELTA
	JMS   LV
	JMP@  LBIT
RBIT:	0  
	DAC   LASTRIG
	ASZ
	JMP   RB1
	LAC@  WPTR       ; HALLWAY
	ADD   WALLS
	IOR   [10000']
	DAC@  DPTR
	XOR   [30000']
	DAC@  DPTR
	LAC   [DJMS WAIT,]
	DAC@  DPTR
	LAC   CNT
	ASN
	JMP   RB2
	CAL
	DAC   XDELTA
	LAC@  WPTR
	SAL   1
	CIA
	DAC   YDELTA
	JMS   LV
RB2:	LAC@  WPTR2
	CIA
	ADD   WALLS
	IOR   [20000']
	DAC@  DPTR
	LAC   [DJMS WAIT,]
	DAC@  DPTR
	CAL
	DAC   YDELTA
	LAC@  WPTR2
	SUB@  WPTR
	DAC   XDELTA
	JMS   LV
	JMS   FIX
	CAL
	DAC   XDELTA
	LAC@  WPTR2
	SAL   1
	DAC   YDELTA
	JMS   LV
	LAC   [20000']
	DAC   BEAMBIT
	CAL
	DAC   YDELTA
	LAC@  WPTR
	SUB@  WPTR2
	DAC   XDELTA
	JMS   LV
	JMP@  RBIT
RB1:	LAC@  WPTR2      ; WALL
	ADD   WALLS
	IOR   [10000']
	DAC@  DPTR
	XOR   [30000']
	DAC@  DPTR
	LAC   [DJMS WAIT,]
	DAC@  DPTR
	LAC@  WPTR
	SUB@  WPTR2
	DAC   XDELTA
	DAC   YDELTA
	JMS   LV
	LAC@  WPTR2
	ADD   WALLS
	IOR   [10000']
	DAC@  DPTR
	LAC@  WPTR2
	CIA
	ADD   WALLS
	IOR   [20000']
	DAC@  DPTR
	LAC   [DJMS WAIT,]
	DAC@  DPTR
	LAC@  WPTR
	SUB@  WPTR2
	DAC   XDELTA
	CIA
	DAC   YDELTA
	JMS   LV
	JMP@  RBIT
FIX:	0  
	CLL
	LAC   NEXTBIT
	ASN
	STL
	CLA
	RAR   3
	DAC   BEAMBIT
	JMP@  FIX
ENDCHECK:0  
	ASN
	JMP@  ENDCHECK
CLOSEOUT:LAC   CNT		; SET LENGTH OF HALLWAY
	DAC   HALLNGTH
	LAC@  WPTR2
	ADD   WALLS
	IOR   [20000']
	DAC@  DPTR
	XOR   [30000']
	DAC@  DPTR
	LAC   [DJMS WAIT,]
	DAC@  DPTR
	CAL
	DAC   YDELTA
	LAC@  WPTR2
	SAL   1
	DAC   ETEM
	CIA
	DAC   XDELTA
	JMS   LV
	LAC   LASTLEF
	ASZ
	LAC   [20000']
	DAC   BEAMBIT
	CAL
	DAC   XDELTA
	LAC   ETEM
	CIA
	DAC   YDELTA
	JMS   LV
	LAC   [20000']
	DAC   BEAMBIT
	CAL
	DAC   YDELTA
	LAC   ETEM
	DAC   XDELTA
	JMS   LV
	LAC   LASTRIG
	ASN
	JMP   EN1
	CAL
	DAC   XDELTA
	LAC   ETEM
	DAC   YDELTA
	JMS   LV
EN1:	CAL
	DAC@  DPTR		; INSERT THE DHLT
	JMS   VISIBLE		; NOW CHECK FOR VISIBLE OPPONENTS
	JMP@  PRINT

;	CHECK FOR VISIBLE OPPONENTS
;
VISIBLE:0
	LWC   9.		; 8 IMLACS TO DO
	DAC   CNT2
	LAC   [DSPTCH-1]	; SET POINTER TO IMLAC INFO TABLES
	DAC   VISPT
	LAC   [THING-1]		; SET UP POINTER TO DLYA'S
	DAC   VISPT2
	IAC			; POINT TO DSTS'S
	DAC   VISPT3
	ADD   [2]		; POINT TO DJMS'S EYES
	DAC   VISPT4
	IAC			; POINT TO DJMS'S BODY (NAME)
	DAC   VISPT5
VISLOOP:ISZ   CNT2		; HAVE WE CHECKED ALL 8?
	JMP   .+2		; NO
	JMP@  VISIBLE		; YES, RETURN
	LAC@  VISPT		; GET ADDRESS OF IMLAC'S INFO TABLE
	DAC   SEEPT
	DAC   PTR4
	LAC@  SEEPT		; MAY CHANGE IT ON US, SO GET STATUS
	ASZ			; IS THIS IMLAC PLAYING?
	JMP   PLAYING		; YES
	JMP   .+3
BLOWING:LAC   JMSEXP
	JMP   .+2
NOSEE:	LAC   [DNOP]		; NO, SO MAKE HIM INVISBLE OR EXPLODING
	ISZ   VISPT2		; DON'T CHANGE Y
	ISZ   VISPT3		; DON'T CHANGE DSTS
	DAC@  VISPT5		; SET TO INVISIBLE OR EXPLODING
	LAC   [DNOP]		; NO EYES WANTED
	DAC@  VISPT4
BUMP:	JMS   BUMPPTS		; UPDATE POINTERS TO NEXT IMLAC
	JMP   VISLOOP		; NOW DO NEXT IMLAC
;
;	ACTIVE PLAYER
;
PLAYING:LAW   9.		; SET ID
	ADD   CNT2
	DAC   IID
	JMS   SEEUS		; SEE IF IT CAN BE SEEN
	JMP   NOSEE		; CAN'T BE SEEN
	LAC@  PTR4		; COULD HE BE BLOWING UP?
	ASP
	JMP   HEVIS		; HE IS VISIBLE
	JMP   BLOWING		; HE IS BLOWING UP
SEEUS:	0
	LAC@  DIR
	AND   [3]
	DAC@  [SAVEDIR]
	LAC@  DX
	DAC@  [SAVEDX]
	LAC@  DY
	DAC@  [SAVEDY]
	JMS@  [SEE]
	JMP@  SEEUS
	ISZ   SEEUS
	JMP@  SEEUS
SEEPT:	0
FTEMP:	0
;
;	VISIBLE OPPONNENT!
;
FIGX:	0
	LAC@  [DISTAN]		; NOW I KNOW I SEE HIM
	ADD   [WALLS]		; GET CURRECT POSITION FOR NAME
	DAC   FTEMP
	LAC@  FTEMP
	CIA
	ADD   WALLS
	IOR   [20000']		; MAKE IT A DLYA
	JMP@  FIGX
HEVIS:	JMS   FIGX		; FIGURE THE NEW DLXA
	DAC@  VISPT2		; STICK IT IN
	LAC@  [DISTAN]		; GET DISTANCE TO OPPONENT
	SAR   3			; SCALE IT TO 2 SIGNIFICANT BITS
	XOR   [3]		; COMPLEMENT MEANNING
	IOR   [DSTS 0]		; MAKE IT A DSTS INSTRUCTION
	DAC@  VISPT3		; STICK IT IN DISPLAY
	JMS   FIGEYES		; FIGURE OUT WHETHER OR NOT EYES SHOULD BE DISPLAYED
	DAC@  VISPT4
	LAC   IID		; NOW SEE WHICH OPPONENT WE CAN SEE
	ADD   [TNUM-1]		; GET APPROPRIATE NAME
	DAC   TEM2
	LAC@  TEM2
	DAC@  VISPT5		; STICK APPROPRIATE DJMP TO NAME IN DISPLAY LIST
	JMP   BUMP		; NOW DO NEXT OPPONENT
FIGEYES:0
	LAC@  DIR		; SEE IF WE ARE FACING EACH OTHER
	AND   [3]
	ADD   [4]
	SUB@  [IDIR]
	AND   [3]
	ADD   [EYTAB]
	DAC   FTEMP
	LAC@  FTEMP
	JMP@  FIGEYES
;
;	SHIFT TO THE LEFT 13 SUBROUTINE
;
SAR13:0
	SAR   3
	SAR   3
	SAR   3
	SAR   3
	SAR   1
	ASN
	LAW   1
	JMP@  SAR13

;	BLOW US UP AND START AGAIN

ENDER:	CLA			; RETURN TO INSIDE DISPLAY
	DAC   TOPSW
	LAC   [AD2]		; SET BLOW UP DISPLAY AS CURRENT DISPLAY
	DAC   WHICHD
	LAC   [BIGX1INC-1]	; SET POINTER TO INCREMENT TABLE
	DAC   VISPT
	LWC   4.		; 8 PIECES TO DO BUT WE WILL SET UP 2 AT A TIME
	DAC   CNT
BLOWLOOP:JMS   RANDOM		; GET RANDOM NUMBER
	JMS   SAR13		; SCALE IT TO 2 +- SIG BITS
	DAC   TEM1		; SAVE FOR NEXT BIT
	DAC@  VISPT		; STORE DELTA IN FIRST X
	JMS   RANDOM		; GET ANOTHER RANDOM NUMBER
	JMS   SAR13		; SCALE IT TOO
	DAC   TEM2		; ALSO SAVE IT
	DAC@  VISPT		; STORE DELTA IN FIRST Y
	LAC   TEM1		; GET BACK FIRST DELTA X
	CIA			; WE WANT TO BALANCE EXPLOSION SO
	DAC@  VISPT		; MAKE NEXT BIT GO OPPOSITE DIRECTION
	LAC   TEM2		; STORE SECOND Y ALSO IN OPPOSITE DIRECTION
	CIA
	DAC@  VISPT
	ISZ   CNT		; ARE WE DONE WITH SETTING UP DELTAS
	JMP   BLOWLOOP		; NO, DO NEXT 2
	LAC   [BIGX1-1]		; NOW RESET DISPLAY LIST DLXAS AND DLYAS
	DAC   TEM1
	LWC   8.		; EIGHT BITS TO DO
	DAC   CNT
CLRLOOP:JMS   CLRSUB		; RESET THE DLXA
	JMS   CLRSUB		; RESET THE DLYA
	LAC   TEM1		; UPDATE POINTER TO NEXT BIT OF EXPLOSION
	ADD   [5]
	DAC   TEM1
	ISZ   CNT		; DID WE DO ALL EIGHT BITS?
	JMP   CLRLOOP		; NO, DO THE REST
	JMP   RETN		; WAIT EXPLOSION OUT
CLRSUB:	0
	ISZ   TEM1		; POSITION POINTER
	LAC@  TEM1		; GET DLXA OR DLYA
	AND   [30000']		; GET OPCODE BITS
	IOR   [1000']		; POSITION TO CENTER OF SCREEN
	DAC@  TEM1		; STUFF IT BACK
	JMP@  CLRSUB		; RETURN

;	TTY INPUT HANDLER

CHARIN:	0
	RSF			; TTY INPUT?
	JMP   EXIT		; NO, SO IGNORE INTERUPT
	CLA
	RRC			; GET CHARACTER
	AND   [177']		; MASK TO 7 CHARACTERS
	DAC   INCHAR		; SAVE IT
;
;	CHECK TO SEE IF WE ARE WAITING FOR CHARACTERS
;
	LAC   ICNT
	ASN
	JMP   SETUP		; NO SO INTERPRET CHARACTER WE GOT
	LAC   INCHAR		; YES, SO STUFF CHARACTER IN INFO TABLE
	DAC@  17'
	ISZ   ICNT		; WAS THAT ALL WE WANTED?
	JMP   EXIT		; NO, WAIT FOR MORE
	JMP@  IDSPTCH		; YES, GO TO ROUTINE NOW
SETUP:	LAC   [ININFO-1]	; SET UP INPUT BUFFER
	DAC   17`
;
;	CHECK FOR IMLAC WANTS OUT MESSAGE
;	IF HE DOES THEN DO THE FOLLOWING:
;	1)	INDICATE IMLAC NON-ACTIVE IN INFO TABLE
;	2)	DNOP HIS SCORE, BODY, EYES AND NAME
;
CHK1:	LAC   INCHAR		; GET CHARACTER READ BACK
	SAM   [1]		; IS IT TYPE 1?
	JMP   CHK2		; NO, CHECK NEXT TYPE
	LWC   1			; WAIT FOR ONE MORE WORD [ID]
	DAC   ICNT
	LAC   [DTYP1]		; SET UP DISPATCH ADDRESS
SETOUT:	DAC   IDSPTCH
	JMP   EXIT		; WAIT FOR CHARACTERS TO COME IN
DTYP1:	JMS   TESTID		; GET ID OF IMLAC THAT WANTS OUT
GONER:	ASN
	JMS   ERROR		; ERROR IF ID = 0
	JMS   POSITION		; GET POSITION INTO INFO TABLE
	DAC   17'
	LWC   10.
	DAC   ICNT2		; CLEAR INFO ENTRY
	CLA
	DAC@  ITEMP1		; CLEAR STATUS
	DAC@  17'		; CLEAR THE REST
	ISZ   ICNT2
	JMP   .-2
	JMS   GETCNT		; NOW CLEAR DISPLAY LIST SCORE
	LAC   [SCORE-15.]
	ADD   [14.]
	ISZ   ICNT2
	JMP   .-2
	DAC   17'
	LAC   [DNOP]		; DNOP ALL DIGITS
	DAC@  17'
	DAC@  17'
	DAC@  17'
	DAC@  17'
	ISZ   17'
	DAC@  17'
	DAC@  17'
	DAC@  17'
	DAC@  17'
	JMS   GETCNT		; NOW CLEAR DISPLAYED NAME
	LAC   [IML1-9.]
	ADD   [8.]
	ISZ   ICNT2
	JMP   .-2
	DAC   17'
	LAC   [DJMS D040,]	; GET SPACE
	DAC@  17'
	DAC@  17'
	DAC@  17'
	DAC@  17'
	DAC@  17'
	DAC@  17'
	DAC@  17'
	JMS   GETCNT		; FINALLY MAKE HIM INVISIBLE
	LAC   [THING-4]
	ADD   [6]
	ISZ   ICNT2
	JMP   .-2
	DAC   17'
	LAC   [DNOP]
	DAC@  17'		; CLEAR EYES
	DAC@  17'		; CLEAR BODY (NAME)
	LAC   ININFO		; SEE IF IT IS MY REAL IT THAT IS LEAVING
	SAM   MYREAL		; IF SO THEN EXIT PROGRAM, RETURN TO SSV
	JMP   CHKNR
;
;	EXIT ROUTINE
;	SEND PLAYER WANTS OUT TO 10
;	THEN RETURN TO SSV
;
	LAW   1			; SEND I WANT OUT CODE
	JMS   SEND1
	LAC   MYREAL		; SEND MY ID
	JMS   SEND1
	LAC   [17776']		; RESTORE SSV'S BUFFER TO FULL BUFFER
	DAC@  [25']
LEAVE:	IOF			; TURN OFF INTERUPTS
	JMP@  .+1		; NOW EXIT TO SSV
	101'			; ADDRESS OF WHERE TO EXIT TO
CHKNR:	SAM   MYBIT		; SEE IF IT IS THE GUY WE ARE SIM.
	JMP   EXIT		; IF NOT THEN WE ARE DONE
	LAW   1			; SENT LEAVING MESSAGE TO 10 FOR HIM
	JMS   SEND1
	LAC   MYBIT
	JMS   SEND1
	LAC   MYREAL		; RETURN TO OUR REAL ID
	JMS   GETD
	JMS   PRINT		; REBUILD DISPLAY
	JMP   EXIT
SUBTTL Player Moved (Type 1)
;	CHECK FOR MOVED TO NEW LOCATION MESSAGE
;	IF IT IS THEN DO THE FOLOWING:
;	1)	INDICATE PLAYER ACTIVE IN INFO TABLE
;	2)	UPDATE DIR, X, AND Y IN INFO TABLE
;	3)	CHECK VISIBILITY AND SET IT CORRECTLY
;
CHK2:
ifn fast,[
	sub   [20']		; no chance of move if <20
	asp			; skip if 0 or +
	jmp chk23		; negative, not a new protocol move.
	sub [20']		; a move if 17< x <40
	asp
	jmp chk22		;ah, if 20=< and <40, definitely new-ptcl move.
	sub [100']		;  a move if GE 140
	asp
	jmp insrtch		; 40=< and <140, a char.
chk22:	lac inchar
	jmp@ [chki20]		;new ptcl move. go hack.
chk23:]	

	lac inchar
	SAM   [2]		; IS IT TYPE 2?
	JMP   CHK3		; NO BUT SEE IF IT IS TYPE 3
	LWC   4			; 4 MORE WORDS TO COME
	DAC   ICNT
	LAC   [DTYP2]		; SET UP DISPATCH LOCATION
	JMP   SETOUT
DTYP2:	JMS   TESTID
	DAC   IID
	JMS   POSITION		; INDICATE PLAYER IS ACTIVE IN INFO TABLES
	LAC@  ITEMP1		; GET CURRENT STATUS
	ASZ
	ASP			; IGNORE MESSAGE IF HE IS EXPLODING
	JMP   .+2
	JMP   EXIT
	STA
	DAC@  ITEMP1		; SAY PLAYER IS ACTIVE
	ISZ   ITEMP1
	LAC   ININFO+1		; SAVE NEW DIRECTION
	IOR   [100']
	AND   [103']
	SAM   ININFO+1
	JMS   ERROR		; DIRECTION GREATER THAN 3
	AND   [3]		; OR NOT IN 10N FORMAT
	DAC@  ITEMP1
	ISZ   ITEMP1
	LAC   ININFO+2		; SAVE NEW X LOCATION
	JMS   TESTLOC		; MAKE SURE IT IS LEGAL
	DAC@  ITEMP1
	ISZ   ITEMP1
	LAC   ININFO+3		; SAVE NEW Y LOCATION
	JMS   TESTLOC
	DAC@  ITEMP1

	;re-entry pt from higher 2k
chk25:	JMS   GETCNT		; SET UP POINTER TO HIS DISPLAY LIST SLOT
	LAC   [THING-7]
	ADD   [6]
	ISZ   ICNT2
	JMP   .-2
	DAC   17'
	JMS   SEEUS		; CAN HE BE SEEN?
	JMP   NOTVIS		; NO
	JMS   FIGX		; YES, NOW FIGURE DLXA
	DAC@  17'		; STORE IT AWAY
	LAC@  [DISTAN]		; NOW FIGURE DSTS 
	SAR   3
	XOR   [3]
	IOR   [DSTS 0]
	DAC@  17'
	ISZ   17'		; SKIP OVER WAIT
	JMS   FIGEYES		; NEXT DO EYES
	DAC@  17'		; STORE THEM
	LAC   IID		; LAST IS NAME
	ADD   [TNUM-1]
	DAC   ITEMP1
	LAC@  ITEMP1
	DAC@  17'
	JMP   MCHK		; SEE IF ID IS OURS
NOTVIS:	LAC   [DNOP]		; IF NOT VISIBLE THEN MAKE IT SO
	ISZ   17'		; SKIP DLXA
	ISZ   17'		; SKIP DSTS
	ISZ   17'		; SKIP OVER WAIT
	DAC@  17'		; CLEAR EYES
	DAC@  17'		; CLEAR BODY (NAME)
MCHK:	LAC   IID		; SEE IF IT IS US
	SAM   MYBIT
	JMP   EXIT		; NO, DONE
	JMS   PRINT		; IF SO THEN UPDATE DISPLAY
	JMP   EXIT		; DONE
SUBTTL Player Died (Type 3)
;	CHECK FOR PLAYER SHOT MESSAGE
;	IF SO THEN DO THE FOLLOWING:
;	1)	INDICATE IN TABLE THAT HE IS BLOWING UP
;	2)	BUMP SHOOTING PLAYERS SCORE
;	3)	GENERATE EXPLOSION IF VISIBLE
;	4)	IF THIS IMLAC GOT HIT THEN:
;		A)	SET LIFE FLAG TO SHOT
;		B)	PUT NAME OF WHO SHOT US IN WHODIDIT
;
CHK3:	SAM   [3]		; TYPE 3?
	JMP   CHK4		; NO, BUT TRY TYPE 4
	LWC   2			; TWO WORDS TO WAIT FOR
	DAC   ICNT
	LAC   [DTYP3]		; SET DISPATCH ADDRESS
	JMP   SETOUT
DTYP3:	JMS   TESTID
	LAC   ININFO+1
	ASN
	JMS   ERROR		; ID ZERO
	SUB   [9.]
	ASP
	JMP   .+3
	ADD   [9.]
	JMS   ERROR		; ID GREATER THAN 8
	ADD   [9.]
	DAC   KILL		; SAVE DYING ID FOR UPSCORE
	JMS   POSITION		; INDICATE PLAYER IS DYING
	COA
	DAC@  ITEMP1
	LAC   ITEMP1
	ADD   [5]
	DAC   ITEMP1
	ADD   [4]
	DAC   ITEMP2
	CAL			;TURN OFF ANY FIRING WE HAVE ON HIM
	DAC@  ITEMP1
	LWC   60.		; SET EXPLOSION TO LAST 1 1/2 SEC
	DAC@  ITEMP2
	LAC   ININFO+1		; SEE IF I WAS SHOT
	SAM   MYBIT
	JMP   NOTME
	LAC   ININFO
	ADD   [TNUM-1]		; SAY WHO DID IT IN WHODIDIT
	DAC   ITEMP2
	LAC@  ITEMP2
	DAC@  [WHODIDIT]
	LAC   ININFO		; WAIT LONGER IN BIG 
	DAC   BIGEXP		; EXPLOSION IF WE ARE PLAYING OURSELVES
	SAM   MYREAL		; SO OUR NEW STARTING LOC WILL BE IN EFFECT
	JMP   .+3
	LWC   120.
	JMP   .+2
	LWC   80.
	XAM   BIGEXP
	JMS   UPSCORE		; UPDATE SCORES
	JMP   ENDER
NOTME:	LAC   ININFO+1		; NOW POINT INTO DISPLAY LIST
	CIA
	DAC   ICNT2
	LAC   [THING-2]
	ADD   [6]
	ISZ   ICNT2
	JMP   .-2
	DAC   ITEMP2
	SUB   [1]		; SET POINTER TO EYES
	DAC   ITEMP1
	LAC@  ITEMP2		; IS HE CURRENTLY VISIBLE?
	SAM   [DNOP]
	JMP   VIS1		; YES
	JMP   NOEXPLO		; NO
VIS1:	LAC   [DNOP]
	DAC@  ITEMP1		; YES, CLEAR EYES
	LAC   JMSEXP		; STICK IN JMS TO EXPLOSION
	DAC@  ITEMP2
NOEXPLO:LAC   ININFO		; BUMP SCORES
	JMS   UPSCORE		; AND UPDATE SCORES IN DISPLAY LIST
	JMP   EXIT
SUBTTL New Name (Type 4)
;	CHECK TO SEE IF NEW NAME SPECIFIED
;	IF SO THEN DO THE FOLLOWING:
;	1)	FILL IN APPROPRATE NAME DISPLAY SUBROUTINE
;	2)	IF MYBIT = 0 THEN ASSIGN THE ID TO MYBIT
;
CHK4:	SAM   [4]		; TYPE 4?
	JMP   ERASER		; NO, KEEP LOOKING
	LWC   11.		; 11. MORE CHARACTERS TO WAIT FOR
	DAC   ICNT
	LAC   [DTYP4]		; SET DISPATCH ADDRESS
	JMP   SETOUT
DTYP4:	JMS   TESTID
	LAC   MYBIT		; SEE IF MYBIT IS ZERO
	ASZ
	JMP   GOTMINE
	LAC   ININFO		; YES, SO SET OUR ID
	DAC   MYREAL
	JMS   GETD
ife fast,	DAC@  [ORIG]		; INDICATE ORIGIONAL ID IN DISPLAY
GOTMINE:LAC   [ININFO]		; SET UP POINTERS FOR TRANSFER
	DAC   16'
	JMS   GETCNT
	LAC   [IML1-8.]		; REMEMBER 1ST CHAR IS OFFSET CHAR
	ADD   [8.]
	ISZ   ICNT2
	JMP   .-2
	DAC   17'
	DAC   ITEMP2
	CLA
	DAC   SPACES
	LWC   6			; MOVE 6 CHARACTER NAME
	DAC   ICNT2
CONVNXT:LAC@  16'
	SUB   [140']		; TRANSLATE TO LOWER CASE
	ASM
	SUB   [40']
	ADD   [140']
	SAM   [40']		; SPACE?
	JMP   .+2		; NO
	ISZ   SPACES		; YES  COUNT THEM FOR OFFSET CHAR
	JMS   GETCHR		; CONVERT TO DJMS
	DAC@  17'
	ISZ   ICNT2
	JMP   CONVNXT
	LAC   SPACES		; NOW FIX OFFSET CHARACTER
	ADD   [CENTER]
	DAC   ITEMP1
	LAC@  ITEMP1
	DAC@  ITEMP2
	LAC   ININFO		; NOW STORE SCORES
	JMS   POSITION
	ADD   [4]
	DAC   ITEMP1
	JMS   FIXSCO		; DO # OF OPPONENTS SHOT
	LAC   ININFO
	JMS   POINTSC
	JMS   SCOREIT
	LAC   ITEMP1
	ADD   [6]
	DAC   ITEMP1
	JMS   FIXSCO		; NOW DO # OF TIMES SHOT
	LAC   ININFO
	JMS   POINTSC
	ADD   [5]
	DAC   PTSCORE
	JMS   SCOREIT
	JMP   EXIT
FIXSCO:	0
	LAC@  16'
	AND   [77']
	SAL   3
	SAL   3
	DAC   ITEMP2
	LAC@  16'
	AND   [77']
	IOR   ITEMP2
	DAC@  ITEMP1
	JMP@  FIXSCO
SPACES:	0

;	SET UP OUR ID
;
;	ENTER WITH ID IN AC
;
GETD:	0
	DAC   MYBIT
	sub   [1]
	dac   mybit1		; store normalized 0-7 ID.
	ADD   [DSPTCH]
	DAC   ITEMP1
	LAC@  ITEMP1		; SET UP DSTAT, DX, DY, AND DIR PTRS
	DAC   DSTAT
	IAC
	DAC   DIR
	IAC
	DAC   DX
	IAC
	DAC   DY
ife fast,[
	LAC   MYBIT		; NOW GET OUR ID IN CHARACTER
	IOR   [60']
	JMS   GETCHR
	DAC@  [CURENT]		; SAY OUR CURRENT ID IN DISPLAY
]
	JMP@  GETD
;
;
;	ERASE RING BUFFER?
;
ERASER:	SAM   [14']		; TYPE 4?
	JMP   INSRTCH		; NO, JUST INSERT INTO RING BUFFER
	JMS   ERASE
	JMP   EXIT
ERASE:	0
	LWC   4			; RESET LINE COUNT
	DAC   RINGLC
	LAC   [RINGST]		; RESET BOTH POINTERS
	DAC   RNGPT
	IAC
	DAC   RNGPT2
	LAC   [DJMS D012,]	; REPLACE DJMP TO CURSER
	DAC@  RNGPT
	LAC   [DJMS CUR,]
	DAC@  RNGPT2
	LAC   [DJMP RINGST,]
	DAC@  [RING]
	DAC@  [RINGEND]
	JMP@  ERASE
;
;	GET DJMS FOR A CHARACTER
;
GETCHR:	0
	AND   [177']		; MASK TO 7 BITS
	SAM   [12']		; LINE FEED?
	JMP   .+3
	LAC   [DJMS D012,]
	JMP   STORECH
	SAM   [10']		; BACK SPACE?
	JMP   .+3
	LAC   [DJMS D010,]
	JMP   STORECH
	SAM   [15']		; CR?
	JMP   .+3
	LAC   [DJMS D015,]
	JMP   STORECH
	SUB   [40']		; DON'T ALLOW ANYTHING BELOW 40
	ASP
	CLA
	ADD   [40']
	SUB   [140']		; TRANSLATE TO LOWER CASE
	ASM
	SUB   [40']
	ADD   [140'-40']
	ADD@  [24']		; CONVERT TO DJMS
	DAC   ITEMP1
	LAC@  ITEMP1
STORECH:DAC   ITEMP1
	JMP@  GETCHR

;	INSERT CHARACTER INTO RING BUFFER
;
INSRTCH:JMS   FORWARD
	LAC   INCHAR
	JMS   GETCHR		; GET DJMS FOR CHARACTER
	SAM   [DJMS D012,]
	JMP   NOTNL		; NO
	ISZ   RINGLC		; YES, BUT IS THERE ROOM ON SCREEN?
	JMP   NOTNL
	JMS   ROLL
	JMP   OK
NOTNL:	LAC   RNGPT2
	SAM   RNGPT		; HAVE WE FILLED ENTIRE BUFFER?
	JMP   OK		; NO
	JMS   ROLL		; YES, ROLL TOP LINE OFF
OK:	LAC   [DJMP CUR,]
	DAC@  RNGPT2
	JMS   BACK		; BACK UP POINTER
	LAC   ITEMP1		; GET DJMS AGAIN
	DAC@  RNGPT2		; STICK IN ON TOP OF OLD DJMP CUR
	JMS   FORWARD		; MOVE POINTER BACK UP
	LAC   INCHAR
	SAM   [15']
	JMP   EXIT		; DONE
	LAW   12'
	DAC   INCHAR
	JMP   INSRTCH
FORWARD:0			; ROLL RNGPT2 FORWARD ONE SLOT
	LAC   RNGPT2
	IAC
	SAM   [RINGEND]
	JMP   .+2
	LAC   [RINGST]
	DAC   RNGPT2
	JMP@  FORWARD
BACK:	0
	STA
	ADD   RNGPT2
	SAM   [RING]
	JMP   .+2
	LAC   [RINGEND-1]
	DAC   RNGPT2
	JMP@  BACK

;
ROLL:	0			; ROLL RINGPT FORWARD ONE LINE
LOOK:	LAC   RNGPT
	IAC
	SAM   [RINGEND]
	JMP   .+2
	LAC   [RINGST]
	SAM   RNGPT2
	JMP   .+4
	JMS   ERASE
	JMS   FORWARD
	JMP@  ROLL
	DAC   RNGPT
	LAC@  RNGPT
	SAM   [DJMS D012,]
	JMP   LOOK
MOVED:	LAC   RNGPT
	AND   [7777']
	IOR   [160000']
	DAC@  [RING]
	STA
	ADD   RINGLC
	DAC   RINGLC
	JMP@  ROLL
;
;	RETURN FROM CHARACTER READ
;
EXIT:	JMP@  CHARIN
GETCNT:	0
	LAC   ININFO		; GET ID OF MESSAGE ORIGINATOR
	CIA			; MAKE IT INTO A COUNT
	DAC   ICNT2
	JMP@  GETCNT
POSITION:0
	ADD   [DSPTCH-1]	; POINT TO CORRECT STATUS INDICATOR
	DAC   ITEMP1
	LAC@  ITEMP1
	DAC   ITEMP1
	DAC   SEEPT		; ALSO SET SEEPT FOR TYPE 2 COMMAND
	JMP@  POSITION
TESTID:	0			; TEST FOR VALID ID IN ININFO
	LAC   ININFO
	ASN			; ALSO CAN'T BE ZERO
	JMS   ERROR		; ID ZERO OR SAME AS MYBIT
	SUB   [9.]		; CAN'T BE > OR = TO 9.
	ASP
	JMP   TESTOK
	LAC   ININFO
	JMS   ERROR		; ID GREATER THAN 8
TESTOK:	LAC   ININFO		; ALL OK SO RETURN WITH ID IN AC
	JMP@  TESTID
TESTLOC:0			; TEST TO SEE IF LEGAL LOCATION
	AND   [77']		; MINIMUM IS LOCATION 1
	ASN
	JMS   ERROR		; LOCATION ZERO
	SUB   [32.]
	ASP
	JMP   .+3
	ADD   [32.]
	JMS   ERROR		; LOCATION GREATER THAN 31.
	ADD   [32.]
	JMP@  TESTLOC
SUBTTL Error Handling Routine
;	ERROR HANDLING ROUTINE
;
ERROR:	0			; ADDRESS OF WHERE THE ERROR WAS FOUND
	DAC   ERRAC		; SAVE AC ERROR MESSAGE
	LAC   IDSPTCH		; SAVE DISPATCH ADDRESS
	DAC   ERRDSP
	LWC   11.
	DAC   ICNT2		; NOW SAVE INFO AREA
	LAC   [ININFO-1]
	DAC   17'
	LAC   [ERRINFO-1]
	DAC   16'
SVELOP:	LAC@  17'
	DAC@  16'
	ISZ   ICNT2
	JMP   SVELOP
	ISZ   ERRCNT		; BUMP THE ERROR COUNT
	NOP
	LAC   ERRCNT		; NOW DISPLAY IT
	JMS   GETCHR
	DAC@  [ERRCHAR]
	JMP   EXIT		; NOW IGNORE BAD MESSAGE
ERRAC:	0			; SAVED AC
ERRDSP:	0			; SAVED DISPATCH ADDRESS
ERRCNT:	60'			; ERROR COUNT
SUBTTL Routine Variables
;	ROUTINES VARIABLES
;
INCHAR:	0			; LAST CHARACTER READ IN
ICNT:	0			; THE NUMBER OF CHARACTERS WE ARE WAITING FOR
ICNT2:	0			; GENERAL PURPOSE COUNTER USED IN ROUTINE
ITEMP1:	0			; TEMPORARY LOCATIONS
ITEMP2:	0			; ANOTHER TEMPORARY LOCATION
IDSPTCH:0			; DISPATCHING ADDRESS FOR COMMAND ROUTINES
RNGPT:	RINGST			; FIRST CHARACTER OF RING BUFFER POINTER
RNGPT2:	RINGST+1		; LAST CHARACTER OF RING BUFFER POINTER
RINGLC:	-4			; RING BUFFER LINE COUNTER
ININFO:	0			; INPUT INFORMATION FROM 10 BUFFER
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
;
;	CONSTANTS GO HERE AT END OF THIS 2K !!!!! ANY REFS TO OR FROM
;	SUCCEEDING 2K MUST BE INDIRECT-ADDRESS! BLEAH!!!!!! (KLH)
;
CONSTANTS

;LOC 14000		;happens about here anyway, just needs precision.

;
;	DISTANCES TO WALLS TABLE
;
WALLS:	511.			; DISTANCES TO WALLS
	450.
	358.
	281.
	225.
	184.
	155.
	133.
	116.
	103.
	92.
	83.
	75.
	70.
	64.
	60.
	56.
	53.
	50.
	47.
	45.
	43.
	41.
	39.
	37.
	35.
	33.
	31.
	29.
	27.
	25.
;
;	ERROR SAVING OF INFO INFORMATION AREA
;
ERRINFO:0		; HOLDS 2ND CHARACTER OF LAST BAD MESSAGE
	0		; HOLDS THE REST OF THE MESSAGE
	0
	0
	0
	0
	0
	0
	0
	0
	0
;
;	N DIRECTION LETTER TABLE
;	E
;	S
;	W
;
DIRLET:	116'
	105'
	123'
	127'
;
;	YOU WERE SHOT BY: MESSAGE
;
YWSB:	131'
	117'
	125'
	40'
	127'
	105'
	122'
	105'
	40'
	123'
	110'
	117'
	124'
	40'
	102'
	131'
	72'
;
;	EYES AND ARROWS TABLE
;
EYTAB:	DJMS   AWAY
	DJMS   TOLEFT
	DJMS   EYES
	DJMS   TORIGHT
;
;	OFFSET FOR NAME TABLE
;
CENTER:	DJMS  OFF6
	DJMS  OFF5
	DJMS  OFF4
	DJMS  OFF3
	DJMS  OFF2
	DJMS  OFF1
	DNOP
OFF6:	INC E,DM30
	INC DM30,100'
OFF5:	INC E,DM30
	INC DM20,100'
OFF4:	INC E,DM30
	INC DM30,100'
OFF3:	INC E,DM30
	INC DM20,100'
OFF2:	INC E,DM30
	INC DM30,100'
OFF1:	INC E,DM30
	INC DM20,140'
;
;	DJMSES TO NAME LABELS ROUTINES
;
TNUM:	DJMS	IML1
	DJMS	IML2
	DJMS	IML3
	DJMS	IML4
	DJMS	IML5
	DJMS	IML6
	DJMS	IML7
	DJMS	IML8
;
;	BIG EXPLOSION INFO TABLE
;
BIGX1INC:0
BIGY1INC:0
BIGX2INC:0
BIGY2INC:0
BIGX3INC:0
BIGY3INC:0
BIGX4INC:0
BIGY4INC:0
BIGX5INC:0
BIGY5INC:0
BIGX6INC:0
BIGY6INC:0
BIGX7INC:0
BIGY7INC:0
BIGX8INC:0
BIGY8INC:0
SUBTTL Imlac Info Tables
;	IMLAC INFORMATION TABLES
;
DSPTCH:	IM1
	IM2
	IM3
	IM4
	IM5
	IM6
	IM7
	IM8
IMINFL==11.		;# wds info per imlac
IM1:	0			; STATUS WORD  -1 IF ACTIVE  1 IF DYING  0 IF NOT IN GAME
	0			; DIRECTION
	0			; X LOCATION
	0			; Y LOCATION
	0			; PLAYERS SCORE
	0			; BULLET COUNTER
	0			; MY DIRECTION AT TIME OF FIRE
	0			; MY X LOCATION AT TIME OF FIRE
	0			; MY Y LOCATION AT TIME OF FIRE
	0			; EXPLOSION TIMER
	0			; SHOT DEAD COUNTER
IM2:	BLOCK IMINFL
IM3:	BLOCK IMINFL
IM4:	BLOCK IMINFL
IM5:	BLOCK IMINFL
IM6:	BLOCK IMINFL
IM7:	BLOCK IMINFL
IM8:	BLOCK IMINFL
SUBTTL SEE Test
;	TEST TO SEE IF PLAYER WHOSE ID IS IN IID IS VISIBLE
;	SEEPT SHOULD POINT TO STATUS WORD IN INFO TABLE
;	DISTAN WILL CONTAIN DISTANCE TO OPPONENT ON RETURN IF VISIBLE
;	SKIPS IF PLAYER SEEN
;
SEE:	0
	CLA
	DAC   DISTAN
	LAC@  [SEEPT]		; SET UP LOCAL SEEPT
	DAC   SEEPT2
	ISZ   SEEPT2		; POINT TO DIRECTION
	LAC@  SEEPT2
	DAC   IDIR		; SAVE DIRECTION IN IDIR
	ISZ   SEEPT2		; POINT TO X LOCATION
	LAC@  SEEPT2
	DAC   IX		; SAVE IT IN IX
	ISZ   SEEPT2
	LAC@  SEEPT2		; NOW GET Y LOC
	DAC   IY
	LAC   SAVEDIR		; SEE WHICH WAY WE ARE POINTING
	AND   [1]
	ASZ
	JMP   WEAST		; WEST OR EAST
SNORTH:	LAC   IX		; SOUTH OR NORTH   CHECK HIS X TO MY X
	SAM   SAVEDX		; DOES IT MATCH?
	JMP@  SEE		; NO
	LAC   IY		; YES, NOW GET THE Y DIFFERENCE
	SUB   SAVEDY
	ASN			; IS HE IN MY SQUARE?
	JMP@  SEE		; YES, THEN I CAN'T SEE HIM
	DAC   SEEPT2		; SAVE DISTANCE TO HIM
	ASP			; SEE IF DISTANCE POSITIVE
	JMP   HENORTH		; NO, HE MUST BE NORTH OF ME
	CIA			; YES, SO HE IS SOUTH OF ME
	DAC   SEEPT2		; MAKE DISTANCE NEGATIVE
	JMP   HESOUTH
HEEAST:	LAW   2
HENORTH=HEEAST
	AND   SAVEDIR		; SEE IF I AM LOOKING NORTH
	ASZ			; IF NOT THEN I CAN'T SEE HIM
	JMP@  SEE		; I LOOK SOUTH SO I CAN'T SEE HIM
	JMP   CHKLN		; OK SO FAR, NOW CHECK LENGTH OF HALL
HESOUTH:LAW   2
HEWEST=HESOUTH
	AND   SAVEDIR		; SEE IF I AM LOOKING SOUTH
	ASN			; IF NOT THEN I CAN'T SEE HIM
	JMP@  SEE		; I NO SEE HIM
	JMP   CHKLN		; SO FAR SO GOOD, BUT CHECK HALLWAY LENGTH
WEAST:	LAC   IY		; CHECK HIS Y TO MY Y
	SAM   SAVEDY		; IT MUST MATCH
	JMP@  SEE		; CAN'T SEE HIM
	LAC   IX		; NOW GET THE X DIFFERENCE
	SUB   SAVEDX
	ASN			; IS HE IN MY SQUARE?
	JMP@  SEE		; YES, SO I CAN'T SEE HIM
	DAC   SEEPT2		; SAVE THE DISTANCE TO HIM
	ASP			; BUT SEE IF POSITIVE DISTANCE
	JMP   HEWEST		; NO, NEGATIVE SO HE IS WEST OF ME
	CIA
	DAC   SEEPT2
	JMP   HEEAST		; HE IS EAST OF ME
CHKLN:	LAC   SEEPT2
	CIA			; SET DISTANCE TO OPPONENT
	DAC   DISTAN
CHKLN1:	LAW   1
	AND   SAVEDIR
	ASZ
	JMP   CHKLN3
	JMS   CREM2
	ADD   SAVEDY
	DAC   SAVEDY
CHKLN2:	LAC   [MAZE]
	ADD   SAVEDY
	DAC   MPTR2
	LAC   SAVEDX
	ASZ
	JMP   PT1
	LAC   [100000']
	JMP   PT2
PT1:	CIA
	DAC   MCNT
	CLL
	LAC   [100000']
	RAR   1
	ISZ   MCNT
	JMP   .-2
PT2:	DAC   BIT2
	LAC@  MPTR2
	AND   BIT2		; SEE IF IT IS AN OPEN SQUARE
	ASZ
	JMP@  SEE
	ISZ   SEEPT2		; ARE WE AS FAR AS THE OPPONENT?
	JMP   CHKLN1		; NO
	LAC@  [IID]		; YES, SEE IF HE IS ME
	SAM@  [MYBIT]
	ISZ   SEE		; DON'T SKIP IF SO (CAN'T SEE ME)
	JMP@  SEE
CHKLN3:	JMS   CREM2
	CIA
	ADD   SAVEDX
	DAC   SAVEDX
	JMP   CHKLN2
CREM2:	0
	LAC   SAVEDIR
	SAR   1
	AND   [1]
	ASN
	LAC   [-1]
	JMP@  CREM2
DISTAN:	0
SAVEDIR:0
SAVEDX:	0
SAVEDY:	0
SEEPT2:	0
MCNT:	0
MPTR2:	0
IY:	0     			; OBJECT ID Y LOCATION
IX:	0     			; OBJECT ID X LOCATION
IDIR:	0			; OBJECT ID IMLAC DIRECTION
BIT2:	0
SUBTTL New-protocol checking/munching

; CHKI20  routine to handle new-protocol checking and munching,
; as well as old.
;put here since no room in lower 2k of core.  

ifn fast,[

chki20:	and [7]			;get normalized ID, no need to test range!
	iac			;make it 1-8.
	dac@ [iid]			;store for what wants it.
	jms@ [position]		;set up itemp1 and seept pointers into info tabs
	lac@ [itemp1]
	dac ctemp1		;get itemp1 into a var within our 2k.
	lac@ ctemp1		;get current status
	asz
	asp			;ignore this msg if he's exploding
	jmp .+2
	jmp@ [exit]
	sta
	dac@ ctemp1		;say player is active
	lac ctemp1
	iac
	dac plrd		;save ptr to direction
	iac
	dac plrx		;save ptr to x coord
	iac
	dac plry		;save ptr to y coord
	dac ctemp1
	dac@ [itemp1]
			;itemp1 is now satisfactorily updated, and
			;indices into position tables done, now do function.
	lac@ [inchar]
	and [70']		;only interested in function digit
	sar 3
	add [jmp plrvec]
	dac plrjmp
plrjmp:	0
plrvec:	jmp badvec
	jmp badvec
	jmp plrtrn		; 2 - right turn
	jmp plltrn		; 3 - left turn
	jmp plflip		; 4 - turn around
	jmp plmove		; 5 - move forward
	jmp plback		; 6 - move backward
badvec:	jms@ [error]		; 7 - bad
	jmp@ [exit]

plrd:	0		;pointer to direction
plrx:	0		;pointer to x coord
plry:	0		;guess what

plrtrn:	lac@ plrd	;get direction
	iac		;right turn
	and [3]
	dac@ plrd
	jmp plrdon
plltrn:	lac@ plrd
	sub [1]		;left turn
	and [3]
	dac@ plrd
	jmp plrdon
plflip:	lac@ plrd
	add [2]		;turn right twice to turn-around
	and [3]
	dac@ plrd
	jmp plrdon
plback:	lac@ plrd	;backward-- reverse direction then move.
	add [2]
	jmp .+2
plmove:	lac@ plrd
	and [3]
	add [jmp pldvec]
	dac plmjmp
plmjmp:	0
pldvec:	jmp plmnor	;north
	jmp plmea	;east
	jmp plmsou	;south
	jmp plmwes	;west
plmnor:	lac@ plry
	sub [1]		;decrement Y coord for north moving
	jms@ [testloc]
	dac@ plry
	jmp plrdon
plmea:	lac@ plrx
	iac		;increment X coord for east
	jms@ [testloc]
	dac@ plrx
	jmp plrdon
plmsou:	lac@ plry
	iac		; incrment Y coord for south
	jms@ [testloc]
	dac@ plry
	jmp plrdon
plmwes:	lac@ plrx
	sub [1]		; decrement X coord for west
	jms@ [testloc]
	dac@ plrx
	jmp plrdon

plrdon:	lac@ [iid]	;get player id again
	dac@ [ininfo]	;and fake out stupid routine
	jmp@ [chk25]	;done with new ptcl handling.

ctemp1:	0	;pointer substi. for itemp1
] ;end of ifn fast

CONSTANTS
SUBTTL Display stuff
;	NAME SUBROUTINES
;	5 CHARACTER NAME
;
IML1:	REPEAT 7,DJMS D040
	DRJM			; RETURN JUMP
IML2:	REPEAT 7,DJMS D040
	DRJM
IML3:	REPEAT 7,DJMS D040
	DRJM
IML4:	REPEAT 7,DJMS D040
	DRJM
IML5:	REPEAT 7,DJMS D040
	DRJM
IML6:	REPEAT 7,DJMS D040
	DRJM
IML7:	REPEAT 7,DJMS D040
	DRJM
IML8:	REPEAT 7,DJMS D040
	DRJM
;
;	GSV CHARACTER SUBROUTINES
;
CUR:	INC E,D0M1
	INC D0M3,B30
	INC B30,B30
	INC D03,D20
	INC D01,T
	DJMP DLIST
WAIT:	INC E,P			; 40 MICROSECOND WAIT
	REPEAT 8.,INC P,P
	INC P,140
D010:	INC E,DM30
	INC DM30,DM30
	INC DM20,140'
D012:	INC E,D0M3 		; END_OF_LINE
	INC D0M3,D0M3
	INC D0M3,D0M3
	INC D0M3,D0M3
	INC X,X
D015:	DLXA 200
	DJMS WAIT
	DRJM
DNL3:	DLXA  540
	DJMP  DNL+1
DNL2:	DLXA 1710
	DJMP .+2
DNL:	DLXA 10
	DJMS WAIT
	DJMP D012
D040:	INC E,D30 		; SPACE
	INC D30,D30
	INC D20,X
EYES:	INC E,D03		; EYES
	INC D03,D03
	INC D03,DM33
	INC B00,B00
	INC D30,D30
	INC B00,B00
	INC DM30,D00
	INC D0M3,D0M3
	INC D0M3,D0M3
	INC D0M3,140'
CMZE:	INC E,B03
	INC B03,B03
	INC B03,B03
	INC B03,B02
	INC B30,B30
	INC B30,B10
	INC B0M3,B0M3
	INC B0M3,B0M3
	INC B0M3,B0M3
	INC B0M2,BM30
	INC BM30,BM30
	INC BM10,B12
	INC B12,B12
	INC B12,B12
	INC B12,B12
	INC B12,B12
	INC B12,DM30
	INC DM30,DM30
	INC DM10,B1M2
	INC B1M2,B1M2
	INC B1M2,B1M2
	INC B1M2,B1M2
	INC B1M2,B1M2
	INC B1M2,D10
	INC 140',140'
CHARMZE:DJMS CMZE
	DJMP CMZE
SPMAZE:	INC E,D30
	INC D30,D30
	INC D30,D30
	INC D30,D30
	INC D10,140'
ARROWS:	DJMS UPARR
	DJMS RIGHTARR
	DJMS DOWNARR
	DJMS LEFTARR
RIGHTARR:INC E,D33
	INC D03,D33
	INC B30,B30
	INC B30,B10
	INC BM2M2,B02
	INC B02,B2M2
	INC D3M3,D3M3
	INC D0M3,140'
LEFTARR:INC E,D33
	INC D03,D33
	INC B22,B0M2
	INC B0M2,BM22
	INC B30,B30
	INC B30,B10
	INC D3M3,D3M3
	INC D0M3,140'
UPARR:	INC E,D30
        INC D30,D30
        INC D23,B03
        INC B03,B03
        INC B01,BM2M2
        INC B20,B20
	INC BM22,D00
        INC D3M3,D3M3
        INC D3M3,D2M3
        INC D0M1,140'
DOWNARR:INC E,D30
	INC D30,D30
	INC D23,B12
	INC BM20,B1M2
	INC B03,B03
	INC B03,B01
	INC D3M3,D3M3
	INC D3M3,D2M3
	INC D0M1,140'
AWAY:	DLV D,0,20.
	DLV B,0,15.
	DLV B,-2,-5.
	DLV B,4.,0
	DLV B,-2.,5.
	DLV D,0,-35.
	DRJM
TOLEFT:	DLV D,0,20.
	DLV B,-15.,0
	DLV B,5.,2
	DLV B,0,-4.
	DLV B,-5.,2
	DLV D,15.,-20.
	DRJM
TORIGHT:DLV D,0,20.
	DLV B,15.,0
	DLV B,-5.,2.
	DLV B,0,-4.
	DLV B,5.,2.
	DLV D,-15.,-20.
	DRJM

;
;	BIG EXPLOSION DISPLAY LIST
;
AD2:	DHVS  2
	DADR			; TURN ON 8K DISPLAY ADDRESSING
	DLXA  500
	DLYA  1200
	DJMS  WAIT
;
;	YOU WERE SHOT BY:
;
MESAGE:	REPEAT 17.,DJMS DNOP
	DLXA  1000
	DLYA  1000
	DJMS  WAIT
;
;	DJMS TO PLAYER WHO DID THE KILLING
;
WHODIDIT:DJMS  D040
	DSTS   3

IRP N,,[1,2,3,4,5,6,7,8]
BIGX!N:	DLXA  1000
BIGY!N:	DLYA  1000
	DJMS  WAIT
	DNOP
	DNOP
	DNOP
	DJMS  EXPLOSIN+2
TERMIN
	DHLT
SUBTTL Main Display List
;	START OF MAIN DISPLAY LIST

AD1:	DHVS  1
	DADR			; TURN ON 8K DISPLAY ADDRESSING
				; (USE 0 BIT TO INDICATE WHICH 4K)
	DLXA  50
	DLYA  1300
	DJMS  WAIT
	DJMS  IML1
	DJMS  DNL
SCORE:	REPEAT 4,DNOP		; DISPLAY NAMES AND SCORES HERE
	DJMS  DNL
	REPEAT 4,DNOP
	DLXA  50
	DLYA  1100
	DJMS  WAIT
	DJMS  IML2
	DJMS  DNL
	REPEAT 4,DNOP
	DJMS  DNL
	REPEAT 4,DNOP
	DLXA  50
	DLYA  700
	DJMS  WAIT
	DJMS  IML3
	DJMS  DNL
	REPEAT 4,DNOP
	DJMS  DNL
	REPEAT 4,DNOP
	DLXA  50
	DLYA  500
	DJMS  WAIT
	DJMS  IML4
	DJMS  DNL
	REPEAT 4,DNOP
	DJMS  DNL
	REPEAT 4,DNOP
	DLXA  1724
	DLYA  1300
	DJMS  WAIT
	DJMS  IML5
	DJMS  DNL2
	REPEAT 4,DNOP
	DJMS  DNL2
	REPEAT 4,DNOP
	DLXA  1724
	DLYA  1100
	DJMS  WAIT
	DJMS  IML6
	DJMS  DNL2
	REPEAT 4,DNOP
	DJMS  DNL2
	REPEAT 4,DNOP
	DLXA  1724
	DLYA  700
	DJMS  WAIT
	DJMS  IML7
	DJMS  DNL2
	REPEAT 4,DNOP
	DJMS  DNL2
	REPEAT 4,DNOP
	DLXA  1724
	DLYA  500
	DJMS  WAIT
	DJMS  IML8
	DJMS  DNL2
	REPEAT 4,DNOP
	DJMS  DNL2
	REPEAT 4,DNOP
	DLYA  1720
;
;	STATUS LINE
;
	DLXA  60
	DJMS  WAIT
ife fast,[
ORIG:	DJMS  D040	; ORIGIONAL ID
	DJMS  D040
CURENT:	DJMS  D040	; CURRENT ID
	DJMS  D040
]
DEAD:	DJMS  D040	; STATUS OF PLAYER
	DJMS  D040
ERRCHAR:DJMS  D040	; NUMBER OF MESSAGES IN ERROR
;
;
;	N, S, E, OR W LETTER
;
	DLXA  1000
	DJMS  WAIT
	DSTS  3
LETTER:	DJMS  D040
;
;	THIS IS WHERE THE 8 POSSIBLE PLAYERS APPEAR
;
;	DLXA 1000
;	DLYA <POSITION>
;	DSTS <SCALE>
;	DJMS WAIT
;	DJMS <EYES OR DNOP>
;	DJMS <NAME OR DNOP OR EXPLOSION>
;

THING=.+1
REPEAT 8.,[
	DLXA  1000
	DJMS  D040
	DJMS  D040
	DJMS  WAIT
	DJMS  D040
	DJMS  D040
]

;	RING BUFFER

	DSTS  1
	DLXA  200
	DLYA  130
	DJMS  WAIT
RING:	DJMP  RINGST
RINGST:	DJMS  D012
	DJMP  CUR
	BLOCK 160.
RINGEND:DJMP  RINGST

;	DISPLAY LIST FOR MAZE STARTS HERE

DLIST:	DHLT

;	RETURN TO CONSOLE PROGRAM AFTER LOADING

	END 101'
