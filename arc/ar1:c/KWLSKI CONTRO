Review of ALGORITHM = LOGIC + CONTROL

	My major recommendation for this paper is that it should be submitted
to the JACM instead of CACM as the subject of the paper really is theorem
proving using resolution.  I shall attempt to substantiate this recommendation
in the remainder of the review.  First of all the input language that is used in the
paper is very limited, being restricted to sentences of first order logic in
[slightly sugared] disjunctive normal form.

The expressions admitted by the "programming language" are
of the form

		B1,...,Bm <- A1,...,An

which is logically equivalent to the following clause in disjunctive normal
form:

		B1 v ... v Bm v -A1 v ... V -An

	Formulas in disjunctive normal form are too primitive and disjointed to
serve as a well structured programming language.  A good example of this disjointedness
is found in the paper on the definition of the subset relation.
In first order quantificational calculus the relation can be simply expressed
by saying that "x is a subset of y if, for all z, if z belongs to x then z belongs
to y".  However in clausal form the relation must be expressed by two distinct clauses
which are quite difficult to understand by themselves:

		x is a subset of y, arb(x,y) belongs to x <-
		x is a subset of y <- arb(x,y) belongs to y

Neither one of the above clauses makes much sense by itself.
Both need to be considered together as a unit.  Unfortunately
this grouping is not expressible by the language considered in the paper being
reviewed.

	I find that the arguments at the beginning of the paper in favor of
separating factual considerations from control considerations in programming
to be unconvincing.  A major problem in programming is to devise good ways
to combine factual and control information in order to produce good algorithms.
Simple minded schemes such as using a given clause only "top-down" or "bottom-up"
will not suffice as uniform strategies.  The arrow notation used in the paper
is slightly better than this but what is needed is a full fledged control
language [which might be viewed as a generalization of one of the PLANNER-like
which uses parallelism and nondeterminancy instead of backtracking]. In such a
language control questions can be explicitly dealt with so that the section
"A Notation for Expressing Control Information" can have the following example
explicitly written out:

              |
              V
        Grandparent(x,y) <- Parent(x,z),Parent(z,y)
                               |           |
                               V           V

The control infomation
ought to be expressed explicitly by a program of the following form:


top-down-grandparent-rule:
     TO SHOW Grandparent(x,y)
         IF given(x)
             then SHOW Parent(x,z)
                      then SHOW Parent(z,y)
	 IF given(y)
	     then SHOW Parent(z,y)
		      then SHOW Parent(x,z)

The hard part of programming is devising languages and
building up programs such as the one given immediately above
so that factual knowledge and control knowledge can be effectively COMBINED.
My principle criticism of the paper under review is that it
does not recognize that this is the essential problem to be tackled.
Instead the paper simply concedes that the above example cannot be handled by the
arrow notation.  If the paper were rewritten to show how to
combine factual information and control information to produce efficient
algorithms then it would be a useful contribution to JACM.

